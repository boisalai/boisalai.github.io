"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[742],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(n),h=o,d=u["".concat(l,".").concat(h)]||u[h]||c[h]||r;return n?a.createElement(d,s(s({ref:t},p),{},{components:n})):a.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var m=2;m<r;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>m});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_label:"LangChain for LLM Application Development",sidebar_position:3,tags:["LangChain","DeepLearning.AI"]},s="LangChain for LLM Application Development",i={unversionedId:"courses/langchain1",id:"courses/langchain1",title:"LangChain for LLM Application Development",description:"2023-08-25",source:"@site/docs/courses/langchain1.md",sourceDirName:"courses",slug:"/courses/langchain1",permalink:"/docs/courses/langchain1",draft:!1,tags:[{label:"LangChain",permalink:"/docs/tags/lang-chain"},{label:"DeepLearning.AI",permalink:"/docs/tags/deep-learning-ai"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"LangChain for LLM Application Development",sidebar_position:3,tags:["LangChain","DeepLearning.AI"]},sidebar:"tutorialSidebar",previous:{title:"Building Systems with the ChatGPT API",permalink:"/docs/courses/chatgpt-building-systems"},next:{title:"References",permalink:"/docs/category/references"}},l={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Models, Prompts and Parsers",id:"models-prompts-and-parsers",level:2},{value:"Setup",id:"setup",level:3},{value:"Chat API: OpenAI",id:"chat-api-openai",level:3},{value:"Chat API: LangChain",id:"chat-api-langchain",level:3},{value:"Model",id:"model",level:4},{value:"Prompt template",id:"prompt-template",level:4},{value:"Output Parsers",id:"output-parsers",level:3},{value:"Parse the LLM output string into a Python dictionary",id:"parse-the-llm-output-string-into-a-python-dictionary",level:3},{value:"Memory",id:"memory",level:2},{value:"Memory Types",id:"memory-types",level:3},{value:"Setup",id:"setup-1",level:3},{value:"ConversationBufferMemory",id:"conversationbuffermemory",level:3},{value:"ConversationBufferWindowMemory",id:"conversationbufferwindowmemory",level:3},{value:"ConversationTokenBufferMemory",id:"conversationtokenbuffermemory",level:3},{value:"ConversationSummaryMemory",id:"conversationsummarymemory",level:3},{value:"Chains",id:"chains",level:2},{value:"Questions and Answer",id:"questions-and-answer",level:2},{value:"Evaluation",id:"evaluation",level:2},{value:"Agents",id:"agents",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:m},u="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"langchain-for-llm-application-development"},"LangChain for LLM Application Development"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"2023-08-25")),(0,o.kt)("p",null,"Short course",(0,o.kt)("br",null),"\n",(0,o.kt)("a",{parentName:"p",href:"https://www.deeplearning.ai/short-courses/langchain-for-llm-application-development/"},"LangChain for LLM Application Development"),(0,o.kt)("br",null),"\nDeepLearning.AI",(0,o.kt)("br",null),"\nHarrison Chase, Andrew Ng"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Learn LangChain directly from the creator of the framework, Harrison Chase."),(0,o.kt)("li",{parentName:"ul"},"Apply LLMs to your proprietary data to build personal assistants and specialized chatbots."),(0,o.kt)("li",{parentName:"ul"},"Use agents, chained calls, and memories to expand your use of LLMs.")),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://python.langchain.com"},"LangChain")," is a framework\nfor developing applications powered by language models."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/langchain-ai/langchain"},"LangChain repository"),"."),(0,o.kt)("h2",{id:"models-prompts-and-parsers"},"Models, Prompts and Parsers"),(0,o.kt)("h3",{id:"setup"},"Setup"),(0,o.kt)("p",null,"Get your ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/account/api-keys"},"OpenAI API Key"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!pip install python-dotenv\n!pip install openai\n\nimport os\nimport openai\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) # read local .env file\nopenai.api_key = os.environ['OPENAI_API_KEY']\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# account for deprecation of LLM model\nimport datetime\n# Get the current date\ncurrent_date = datetime.datetime.now().date()\n\n# Define the date after which the model should be set to "gpt-3.5-turbo"\ntarget_date = datetime.date(2024, 6, 12)\n\n# Set the model variable based on the current date\nif current_date > target_date:\n    llm_model = "gpt-3.5-turbo"\nelse:\n    llm_model = "gpt-3.5-turbo-0301"\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/models/gpt-3-5"},"GPT-3.5")," for the difference between\n",(0,o.kt)("inlineCode",{parentName:"p"},"gpt-3.5-turbo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"gpt-3.5-turbo-0301"),"."),(0,o.kt)("h3",{id:"chat-api-openai"},"Chat API: OpenAI"),(0,o.kt)("p",null,"Let's start with a direct API calls to OpenAI. See ",(0,o.kt)("a",{parentName:"p",href:"https://platform.openai.com/docs/api-reference"},"OpenAI API Reference"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def get_completion(prompt, model=llm_model):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, \n    )\n    return response.choices[0].message["content"]\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"get_completion(\"What is 1+1?\")\n# 'As an AI language model, I can tell you that the answer to 1+1 is 2.'\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'customer_email = """\nArrr, I be fuming that me blender lid \\\nflew off and splattered me kitchen walls \\\nwith smoothie! And to make matters worse,\\\nthe warranty don\'t cover the cost of \\\ncleaning up me kitchen. I need yer help \\\nright now, matey!\n"""\n\nstyle = """American English \\\nin a calm and respectful tone\n"""\n\nprompt = f"""Translate the text \\\nthat is delimited by triple backticks \ninto a style that is {style}.\ntext: ```{customer_email}```\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"response = get_completion(prompt)\nresponse\n# 'I am quite upset that my blender lid came off and caused my smoothie to splatter all over \n# my kitchen walls. Additionally, the warranty does not cover the cost of cleaning up the \n# mess. Would you be able to assist me at this time, my friend? Thank you kindly.'\n")),(0,o.kt)("h3",{id:"chat-api-langchain"},"Chat API: LangChain"),(0,o.kt)("p",null,"Let's try how we can do the same using LangChain."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/api_reference.html"},"langchain API Reference"),"\nfor details about ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatOpenAI")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatPromptTemplate"),"."),(0,o.kt)("h4",{id:"model"},"Model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"!pip install --upgrade langchain\n\nfrom langchain.chat_models import ChatOpenAI\n\n# To control the randomness and creativity of the generated\n# text by an LLM, use temperature = 0.0\nchat = ChatOpenAI(temperature=0.0, model=llm_model)\nchat\n# ChatOpenAI(verbose=False, callbacks=None, callback_manager=None, \n# client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, \n# model_name='gpt-3.5-turbo-0301', temperature=0.0, model_kwargs={}, \n# openai_api_key=None, openai_api_base=None, openai_organization=None, \n# request_timeout=None, max_retries=6, streaming=False, n=1, max_tokens=None)\n")),(0,o.kt)("h4",{id:"prompt-template"},"Prompt template"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'template_string = """Translate the text \\\nthat is delimited by triple backticks \\\ninto a style that is {style}. \\\ntext: ```{text}```\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.prompts import ChatPromptTemplate\n\nprompt_template = ChatPromptTemplate.from_template(template_string)\nprompt_template.messages[0].prompt\n# PromptTemplate(\n#   input_variables=['style', 'text'], output_parser=None, partial_variables={}, \n#   template='Translate the text that is delimited by triple backticks into a \n#   style that is {style}. text: ```{text}```\\n', \n#   template_format='f-string', validate_template=True)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'customer_style = """American English in a calm and respectful tone"""\n\ncustomer_email = """\nArrr, I be fuming that me blender lid \\\nflew off and splattered me kitchen walls \\\nwith smoothie! And to make matters worse, \\\nthe warranty don\'t cover the cost of \\\ncleaning up me kitchen. I need yer help \\\nright now, matey!\n"""\n\ncustomer_messages = prompt_template.format_messages(\n                    style=customer_style,\n                    text=customer_email)\n\nprint(type(customer_messages))\nprint(type(customer_messages[0]))\n# <class \'list\'>\n# <class \'langchain.schema.HumanMessage\'>\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'print(customer_messages[0])\n# content="Translate the text that is delimited by triple backticks into a style that is \n#   American English in a calm and respectful tone\\n. text: ```\\nArrr, I be fuming that \n#   me blender lid flew off and splattered me kitchen walls with smoothie! And to make \n#   matters worse, the warranty don\'t cover the cost of cleaning up me kitchen. I need \n#   yer help right now, matey!\\n```\\n" additional_kwargs={} example=False\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Call the LLM to translate to the style of the customer message\ncustomer_response = chat(customer_messages)\n\nprint(customer_response.content)\n# I'm really frustrated that my blender lid flew off and made a mess of my kitchen walls \n# with smoothie. To add to my frustration, the warranty doesn't cover the cost of cleaning \n# up my kitchen. Can you please help me out, friend?\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'service_reply = """Hey there customer, \\\nthe warranty does not cover \\\ncleaning expenses for your kitchen \\\nbecause it\'s your fault that \\\nyou misused your blender \\\nby forgetting to put the lid on before \\\nstarting the blender. \\\nTough luck! See ya!\n"""\n\nservice_style_pirate = """\\\na polite tone \\\nthat speaks in English Pirate\\\n"""\n\nservice_messages = prompt_template.format_messages(\n    style=service_style_pirate,\n    text=service_reply)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"service_response = chat(service_messages)\nprint(service_response.content)\n# Ahoy there, me hearty customer! I be sorry to inform ye that the warranty be not coverin' \n# the expenses o' cleaning yer galley, as 'tis yer own fault fer misusin' yer blender by \n# forgettin' to put the lid on afore startin' it. Aye, tough luck! Farewell and may the winds \n# be in yer favor!\n")),(0,o.kt)("h3",{id:"output-parsers"},"Output Parsers"),(0,o.kt)("p",null,"Let's start with defining how we would like the LLM output to look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "gift": False,\n  "delivery_days": 5,\n  "price_value": "pretty affordable!"\n}\n\ncustomer_review = """\\\nThis leaf blower is pretty amazing.  It has four settings:\\\ncandle blower, gentle breeze, windy city, and tornado. \\\nIt arrived in two days, just in time for my wife\'s \\\nanniversary present. \\\nI think my wife liked it so much she was speechless. \\\nSo far I\'ve been the only one using it, and I\'ve been \\\nusing it every other morning to clear the leaves on our lawn. \\\nIt\'s slightly more expensive than the other leaf blowers \\\nout there, but I think it\'s worth it for the extra features.\n"""\n\nreview_template = """\\\nFor the following text, extract the following information:\n\ngift: Was the item purchased as a gift for someone else? \\\nAnswer True if yes, False if not or unknown.\n\ndelivery_days: How many days did it take for the product \\\nto arrive? If this information is not found, output -1.\n\nprice_value: Extract any sentences about the value or price,\\\nand output them as a comma separated Python list.\n\nFormat the output as JSON with the following keys:\ngift\ndelivery_days\nprice_value\n\ntext: {text}\n"""\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.prompts import ChatPromptTemplate\n\nprompt_template = ChatPromptTemplate.from_template(review_template)\nprint(prompt_template)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"messages = prompt_template.format_messages(text=customer_review)\nchat = ChatOpenAI(temperature=0.0, model=llm_model)\nresponse = chat(messages)\n\nprint(response.content)\n# {\n#     \"gift\": true,\n#     \"delivery_days\": 2,\n#     \"price_value\": [\"It's slightly more expensive than the other leaf blowers out there, \n#        but I think it's worth it for the extra features.\"]\n# }\n\ntype(response.content)\n# str\n\n# You will get an error by running this line of code because 'gift' is not a dictionary\n# 'gift' is a string\nresponse.content.get('gift')\n")),(0,o.kt)("h3",{id:"parse-the-llm-output-string-into-a-python-dictionary"},"Parse the LLM output string into a Python dictionary"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.output_parsers import ResponseSchema\nfrom langchain.output_parsers import StructuredOutputParser\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/api_reference.html"},"langchain API Reference"),"\nfor details about ",(0,o.kt)("inlineCode",{parentName:"p"},"ResponseSchema")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"StructuredOutputParser"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'gift_schema = ResponseSchema(name="gift",\n                             description="Was the item purchased\\\n                             as a gift for someone else? \\\n                             Answer True if yes,\\\n                             False if not or unknown.")\ndelivery_days_schema = ResponseSchema(name="delivery_days",\n                                      description="How many days\\\n                                      did it take for the product\\\n                                      to arrive? If this \\\n                                      information is not found,\\\n                                      output -1.")\nprice_value_schema = ResponseSchema(name="price_value",\n                                    description="Extract any\\\n                                    sentences about the value or \\\n                                    price, and output them as a \\\n                                    comma separated Python list.")\n\nresponse_schemas = [gift_schema, \n                    delivery_days_schema,\n                    price_value_schema]\n\noutput_parser = StructuredOutputParser.from_response_schemas(response_schemas)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"format_instructions = output_parser.get_format_instructions()\nprint(format_instructions)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},'The output should be a markdown code snippet formatted in the following schema, including the leading and trailing "\\`\\`\\`json" and "\\`\\`\\`":\n\n``json\n{\n    "gift": string  // Was the item purchased as a gift for someone else? Answer True if yes, False if not or unknown.\n    "delivery_days": string  // How many days did it take for the product to arrive? If this information is not found, output -1.\n    "price_value": string  // Extract any sentences about the value or price, and output them as a comma separated Python list.\n}\n``\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'review_template_2 = """\\\nFor the following text, extract the following information:\n\ngift: Was the item purchased as a gift for someone else? \\\nAnswer True if yes, False if not or unknown.\n\ndelivery_days: How many days did it take for the product\\\nto arrive? If this information is not found, output -1.\n\nprice_value: Extract any sentences about the value or price,\\\nand output them as a comma separated Python list.\n\ntext: {text}\n\n{format_instructions}\n"""\n\nprompt = ChatPromptTemplate.from_template(template=review_template_2)\n\nmessages = prompt.format_messages(text=customer_review, \n                                  format_instructions=format_instructions)\nprint(messages[0].content)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'response = chat(messages)\nprint(response.content)\n# ```json\n# {\n#   "gift": true,\n#   "delivery_days": "2",\n#   "price_value": ["It\'s slightly more expensive than the other leaf blowers out there, but I think it\'s worth it for the extra features."]\n# }\n# ```\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"output_dict = output_parser.parse(response.content)\noutput_dict\n# {'gift': True,\n#  'delivery_days': '2',\n#  'price_value': [\"It's slightly more expensive than the other leaf blowers out there, but I think it's worth it for the extra features.\"]\n# }\n\ntype(output_dict)\n# dict\n\noutput_dict.get('delivery_days')\n# '2'\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://ai.googleblog.com/2022/05/language-models-perform-reasoning-via.html"},"Language Models Perform Reasoning via Chain of Thought"),".\nThis method enables models to decompose multi-step problems into intermediate steps."),(0,o.kt)("h2",{id:"memory"},"Memory"),(0,o.kt)("p",null,"Memory maintains Chain state, incorporating context from past runs.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/api_reference.html#module-langchain.memory"},"langchain.memory"),"."),(0,o.kt)("h3",{id:"memory-types"},"Memory Types"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConversationBufferMemory"),": This memory allows for storing of messages and then extracts the messages in a variable."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConversationBufferWindowMemory"),": This memory keeps a list of the interactions of the comversation over time. It only uses the last K interactions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConversationTokenBufferMemory"),": This memory keeps a buffer of recente interactions in memory, and uses token length rather than number of interactions to determine when to flush interactions."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ConversationSummaryMomery"),": This memory creates a summary of the conversation over time.")),(0,o.kt)("p",null,"Additional Memory Types (supported by LangChain):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Vectore data memory: Stores text (from conversation or elsewhere) in a vectore database and retrieves the most relevant blocks of text."),(0,o.kt)("li",{parentName:"ul"},"Entity memories: Usinh an LLM, it remembers details about specific entities.")),(0,o.kt)("h3",{id:"setup-1"},"Setup"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv()) # read local .env file\n\nimport warnings\nwarnings.filterwarnings('ignore')\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# account for deprecation of LLM model\nimport datetime\n# Get the current date\ncurrent_date = datetime.datetime.now().date()\n\n# Define the date after which the model should be set to "gpt-3.5-turbo"\ntarget_date = datetime.date(2024, 6, 12)\n\n# Set the model variable based on the current date\nif current_date > target_date:\n    llm_model = "gpt-3.5-turbo"\nelse:\n    llm_model = "gpt-3.5-turbo-0301"\n')),(0,o.kt)("h3",{id:"conversationbuffermemory"},"ConversationBufferMemory"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConversationChain")," is a chain to have a conversation and load context from memory.\n",(0,o.kt)("inlineCode",{parentName:"p"},"ConversationBufferMemory")," is a buffer for storing conversation memory.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/api_reference.html"},"langchain API Reference"),"\nfor more."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from langchain.chat_models import ChatOpenAI\nfrom langchain.chains import ConversationChain\nfrom langchain.memory import ConversationBufferMemory\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"llm = ChatOpenAI(temperature=0.0, model=llm_model)\nmemory = ConversationBufferMemory()\nconversation = ConversationChain(\n    llm=llm, \n    memory = memory,\n    verbose=True\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation.predict(input="Hi, my name is Andrew")\nconversation.predict(input="What is 1+1?")\nconversation.predict(input="What is my name?")\nprint(memory.buffer)\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"Human: Hi, my name is Andrew\nAI: Hello Andrew, it's nice to meet you. My name is AI. How can I assist you today?\nHuman: What is 1+1?\nAI: The answer to 1+1 is 2.\nHuman: What is my name?\nAI: Your name is Andrew, as you mentioned earlier.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': \"Human: Hi, my name is Andrew\\nAI: Hello Andrew, it's nice to meet you. \nMy name is AI. How can I assist you today?\\nHuman: What is 1+1?\\nAI: The answer to \n1+1 is 2.\\nHuman: What is my name?\\nAI: Your name is Andrew, as you mentioned \nearlier.\"}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory = ConversationBufferMemory()\nmemory.save_context({"input": "Hi"}, \n                    {"output": "What\'s up"})\nprint(memory.buffer)\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"Human: Hi\nAI: What's up\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': \"Human: Hi\\nAI: What's up\"}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'memory.save_context({"input": "Not much, just hanging"}, \n                    {"output": "Cool"})\nmemory.load_memory_variables({})\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': \"Human: Hi\\nAI: What's up\\nHuman: Not much, just hanging\\nAI: Cool\"}\n")),(0,o.kt)("h3",{id:"conversationbufferwindowmemory"},"ConversationBufferWindowMemory"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory import ConversationBufferWindowMemory\n\nmemory = ConversationBufferWindowMemory(k=1)               \nmemory.save_context({"input": "Hi"},\n                    {"output": "What\'s up"})\nmemory.save_context({"input": "Not much, just hanging"},\n                    {"output": "Cool"})\n\u200b\nmemory.load_memory_variables({})\n# {\'history\': \'Human: Not much, just hanging\\nAI: Cool\'}\n')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConversationBufferWindowMemory")," is a buffer for storing conversation memory\ninside a limited size window. Here, ",(0,o.kt)("inlineCode",{parentName:"p"},"k=1")," is the number of messages to store in buffer.\nSee ",(0,o.kt)("a",{parentName:"p",href:"https://api.python.langchain.com/en/latest/api_reference.html"},"langchain API Reference"),"\nfor more."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'llm = ChatOpenAI(temperature=0.0, model=llm_model)\nmemory = ConversationBufferWindowMemory(k=1)\nconversation = ConversationChain(\n    llm=llm, \n    memory = memory,\n    verbose=False\n)\n\nconversation.predict(input="Hi, my name is Andrew")\n# "Hello Andrew, it\'s nice to meet you. My name is AI. How can I assist you today?"\nconversation.predict(input="What is 1+1?")\n# \'The answer to 1+1 is 2.\'\nconversation.predict(input="What is my name?")\n# "I\'m sorry, I don\'t have access to that information. Could you please tell me your name?"\n')),(0,o.kt)("h3",{id:"conversationtokenbuffermemory"},"ConversationTokenBufferMemory"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConversationTokenBufferMemory")," is a conversation chat memory with token limit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'!pip install tiktoken\n\nfrom langchain.memory import ConversationTokenBufferMemory\nfrom langchain.llms import OpenAI\nllm = ChatOpenAI(temperature=0.0, model=llm_model)\n\nmemory = ConversationTokenBufferMemory(llm=llm, max_token_limit=50)\nmemory.save_context({"input": "AI is what?!"},\n                    {"output": "Amazing!"})\nmemory.save_context({"input": "Backpropagation is what?"},\n                    {"output": "Beautiful!"})\nmemory.save_context({"input": "Chatbots are what?"}, \n                    {"output": "Charming!"})\n\nmemory.load_memory_variables({})\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': 'AI: Amazing!\\nHuman: Backpropagation is what?\\nAI: Beautiful!\\nHuman: Chatbots are what?\\nAI: Charming!'}\n")),(0,o.kt)("h3",{id:"conversationsummarymemory"},"ConversationSummaryMemory"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConversationSummaryMemory")," is a conversation summarizer to chat memory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from langchain.memory import ConversationSummaryBufferMemory\n\n# create a long string\nschedule = "There is a meeting at 8am with your product team. \\\nYou will need your powerpoint presentation prepared. \\\n9am-12pm have time to work on your LangChain \\\nproject which will go quickly because Langchain is such a powerful tool. \\\nAt Noon, lunch at the italian resturant with a customer who is driving \\\nfrom over an hour away to meet you to understand the latest in AI. \\\nBe sure to bring your laptop to show the latest LLM demo."\n\nmemory = ConversationSummaryBufferMemory(llm=llm, max_token_limit=100)\nmemory.save_context({"input": "Hello"}, {"output": "What\'s up"})\nmemory.save_context({"input": "Not much, just hanging"},\n                    {"output": "Cool"})\nmemory.save_context({"input": "What is on the schedule today?"}, \n                    {"output": f"{schedule}"})\n\nmemory.load_memory_variables({})\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': \"System: The human and AI engage in small talk before discussing the day's schedule. \nThe AI informs the human of a morning meeting with the product team, time to work on the \nLangChain project, and a lunch meeting with a customer interested in the latest AI \ndevelopments.\"}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'conversation = ConversationChain(\n    llm=llm, \n    memory = memory,\n    verbose=True\n)\n\nconversation.predict(input="What would be a good demo to show?")\n')),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"> Entering new ConversationChain chain...\nPrompt after formatting:\nThe following is a friendly conversation between a human and an AI. The AI is talkative \nand provides lots of specific details from its context. If the AI does not know the answer \nto a question, it truthfully says it does not know.\n\nCurrent conversation:\nSystem: The human and AI engage in small talk before discussing the day's schedule. The AI \ninforms the human of a morning meeting with the product team, time to work on the LangChain \nproject, and a lunch meeting with a customer interested in the latest AI developments.\nHuman: What would be a good demo to show?\nAI:\n\n> Finished chain.\n\n\"Based on the customer's interest in AI developments, I would suggest showcasing our latest \nnatural language processing capabilities. We could demonstrate how our AI can accurately \nunderstand and respond to complex language queries, and even provide personalized recommendations \nbased on the user's preferences. Additionally, we could highlight our AI's ability to learn \nand adapt over time, making it a valuable tool for businesses looking to improve their \ncustomer experience.\"\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"memory.load_memory_variables({})\n")),(0,o.kt)("p",null,"The preceding code returns this."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"{'history': \"System: The human and AI engage in small talk before discussing the day's schedule. \nThe AI informs the human of a morning meeting with the product team, time to work on the \nLangChain project, and a lunch meeting with a customer interested in the latest AI developments. \nThe human asks what would be a good demo to show.\\nAI: Based on the customer's interest in AI \ndevelopments, I would suggest showcasing our latest natural language processing capabilities. We\ncould demonstrate how our AI can accurately understand and respond to complex language queries, \nand even provide personalized recommendations based on the user's preferences. Additionally, we \ncould highlight our AI's ability to learn and adapt over time, making it a valuable tool for \nbusinesses looking to improve their customer experience.\"}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"")),(0,o.kt)("h2",{id:"chains"},"Chains"),(0,o.kt)("h2",{id:"questions-and-answer"},"Questions and Answer"),(0,o.kt)("h2",{id:"evaluation"},"Evaluation"),(0,o.kt)("h2",{id:"agents"},"Agents"),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"))}c.isMDXComponent=!0}}]);