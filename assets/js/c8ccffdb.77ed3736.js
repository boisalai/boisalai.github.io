"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([[5008],{46934:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(85893),a=t(11151);const r={},o="Python",s={id:"references/languages/python",title:"Python",description:"Install",source:"@site/docs/references/languages/python.md",sourceDirName:"references/languages",slug:"/references/languages/python",permalink:"/docs/references/languages/python",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/references/languages/python.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LaTeX",permalink:"/docs/references/languages/latex"},next:{title:"R",permalink:"/docs/references/languages/r"}},l={},d=[{value:"Install",id:"install",level:2},{value:"Environment",id:"environment",level:2},{value:"Create a virtual environment",id:"create-a-virtual-environment",level:3},{value:"python-dotenv",id:"python-dotenv",level:3},{value:"Loading different environment variable files",id:"loading-different-environment-variable-files",level:3},{value:"Python-dotenv\u2019s Command-Line Interface",id:"python-dotenvs-command-line-interface",level:3},{value:"Connect a Virtual Environment to Jupyter Notebook",id:"connect-a-virtual-environment-to-jupyter-notebook",level:3},{value:"Create <code>ipython kernel</code> for the conda environment",id:"create-ipython-kernel-for-the-conda-environment",level:3},{value:"Snippets",id:"snippets",level:2},{value:"Main()",id:"main",level:3},{value:"Logging",id:"logging",level:3},{value:"Random 16-character password",id:"random-16-character-password",level:3},{value:"YouTube Video Downloader",id:"youtube-video-downloader",level:3},{value:"CSV",id:"csv",level:3},{value:"Device",id:"device",level:3},{value:"Duplicate",id:"duplicate",level:3},{value:"Execution time",id:"execution-time",level:3},{value:"Excel",id:"excel",level:3},{value:"Rename",id:"rename",level:3},{value:"Sort",id:"sort",level:3},{value:"Group by",id:"group-by",level:3},{value:"Long example",id:"long-example",level:3},{value:"Regular Expressions",id:"regular-expressions",level:3},{value:"Delete file",id:"delete-file",level:3},{value:"Beep",id:"beep",level:3},{value:"pydantic",id:"pydantic",level:3},{value:"See also",id:"see-also",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"python",children:"Python"}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsx)(n.p,{children:"To install the latest minor release of Python 3.11 use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"brew install python@3.11\n"})}),"\n",(0,i.jsxs)(n.p,{children:["One optional step is to alias the ",(0,i.jsx)(n.code,{children:"python3.11"})," and ",(0,i.jsx)(n.code,{children:"pip3.11"})," commands to ",(0,i.jsx)(n.code,{children:"python"})," and ",(0,i.jsx)(n.code,{children:"pip"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo '\nalias python=python3.11\nalias pip=pip3.11\n' >> ~/.zshrc\n"})}),"\n",(0,i.jsx)(n.h2,{id:"environment",children:"Environment"}),"\n",(0,i.jsx)(n.h3,{id:"create-a-virtual-environment",children:"Create a virtual environment"}),"\n",(0,i.jsx)(n.p,{children:"Create a virtual environment on MacOS and Linux."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Create the virtual environment\npython3 -m venv .venv\n# Activate the virtual environment on MacOS and Linux\nsource .venv/bin/activate  \n# Upgrade pip\n.env/bin/python3 -m pip install --upgrade pip\n# Install the dependencies\npip3 install -r requirements.txt\n"})}),"\n",(0,i.jsx)(n.p,{children:"After you finish working deactivate your virtual environment by simply executing the below command."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"deactivate\n"})}),"\n",(0,i.jsx)(n.h3,{id:"python-dotenv",children:"python-dotenv"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip install python-dotenv\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"echo SECRET_KEY=my_secret_key >> .venv\necho .env >> .gitignore\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\n# Access variables\ndatabase_url = os.getenv('DATABASE_URL', 'default_value_if_not_found')\nsecret_key = os.getenv('SECRET_KEY')\n\n# Use these values in your application\nprint(f'Database URL: {database_url}')\nprint(f'Secret Key: {secret_key}')\n\n# Get a dictionary of .env variables\nconfig = dotenv_values()\n\n# Get 'SECRET_KEY'\nsecret_key = config.get('SECRET_KEY')\n\n# Now you can use the secret_key variable in your application\nprint(f'Secret Key: {secret_key}')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See also ",(0,i.jsx)(n.a,{href:"https://github.com/theskumar/python-dotenv",children:"python-dotenv"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"loading-different-environment-variable-files",children:"Loading different environment variable files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import platform\nfrom dotenv import load_dotenv\n\nif platform.node() == 'dev-machine':\n    load_dotenv('.env.dev')\nelse:\n    load_dotenv('.env.prod')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"python-dotenvs-command-line-interface",children:"Python-dotenv\u2019s Command-Line Interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Load the .env file\ndotenv -f /path/to/your/.env list\n\n# Set a new variable\ndotenv -f /path/to/your/.env set NEW_VARIABLE "New Value"\n\n# Get a variable value\ndotenv -f /path/to/your/.env get VARIABLE_NAME\n\n# Unset (delete) a variable\ndotenv -f /path/to/your/.env unset VARIABLE_NAME\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Load the .env file\npython -m dotenv list\n\n# Set a new variable\npython -m dotenv set NEW_VARIABLE "New Value"\n\n# Get a variable value\npython -m dotenv get VARIABLE_NAME\n\n# Unset (delete) a variable\npython -m dotenv unset VARIABLE_NAME\n'})}),"\n",(0,i.jsx)(n.h3,{id:"connect-a-virtual-environment-to-jupyter-notebook",children:"Connect a Virtual Environment to Jupyter Notebook"}),"\n",(0,i.jsxs)(n.p,{children:["Install ",(0,i.jsx)(n.code,{children:"ipykernel"})," which allows managing kernels from different environments."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"pip3 install --user ipykernel\n"})}),"\n",(0,i.jsx)(n.p,{children:"Add a virtual environment."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"python3 -m ipykernel install --user --name=myenv\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"create-ipython-kernel-for-the-conda-environment",children:["Create ",(0,i.jsx)(n.code,{children:"ipython kernel"})," for the conda environment"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"conda env create -f /Users/boisalai/Documents/Learning/books/AAAMLP/environment_osx.yml   # creates new virtual env\nconda activate ml   # activate environment in terminal\nconda install ipykernel   # install Python kernel in new conda env\nipython kernel install --user --name=ml-kernel   # configure Jupyter to use Python kernel\n\nconda deactivate          # this step can be omitted by using a different terminal window than before\nconda install jupyter     # optional, might be installed already in system e.g. by 'apt install jupyter' on debian-based systems\njupyter notebook          # run jupyter from system\n"})}),"\n",(0,i.jsx)(n.h2,{id:"snippets",children:"Snippets"}),"\n",(0,i.jsx)(n.h3,{id:"main",children:"Main()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import sys\n\n\ndef main():\n    print(sys.version)\n\n\nif __name__ == "__main__":\n    main()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import logging\n\n# create logger\nlogger = logging.getLogger(__name__)\n# set log level for all handlers to debug\nlogger.setLevel(logging.INFO)\n\n# example usage\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n"})}),"\n",(0,i.jsx)(n.p,{children:"The previous code returns this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"INFO:__main__:info message\nWARNING:__main__:warn message\nERROR:__main__:error message\nCRITICAL:__main__:critical message\n"})}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.a,{href:"https://towardsdatascience.com/how-to-setup-logging-for-your-python-notebooks-in-under-2-minutes-2a7ac88d723d",children:"How to Setup Logging for your Python Notebooks in under 2 Minutes"})," for more."]}),"\n",(0,i.jsx)(n.h3,{id:"random-16-character-password",children:"Random 16-character password"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import os\nimport random\nimport tempfile\n\n# Create a temporary file\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    # Write a random 16-character password to the file.\n    password = ''.join(random.choice('123456789abcdefghijklmnopqrstuvwxyz') for _ in range(16))\n    f.write(password.encode())\n\n    # Flush the file to make sure the data is written immediately.\n    f.flush()\n\n    # Get the path of the temporary file.\n    temp_file_path = f.name\n\n# Print the path of the temporary file.\nprint(temp_file_path)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"youtube-video-downloader",children:"YouTube Video Downloader"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"2023-09-29"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'!pip install pytube==15.0.0 --quiet\n\nfrom pytube import YouTube\n\ndef Download(link):\n    youtubeObject = YouTube(link)\n    youtubeObject = youtubeObject.streams.get_highest_resolution()\n    try:\n        youtubeObject.download()\n    except:\n        print("An error has occurred")\n    print("Download is completed successfully")\n\nlinks = [\n    "https://www.youtube.com/watch?v=3dpZkk91w2k&list=PLbJrgQUb1-poqvfoyFTo6a05QaM4KSTi6&index=5",\n    "https://www.youtube.com/watch?v=v0AMRtuDil4&list=PLbJrgQUb1-poqvfoyFTo6a05QaM4KSTi6&index=6",\n    "https://www.youtube.com/watch?v=8R2Or-JEdSg&list=PLbJrgQUb1-poqvfoyFTo6a05QaM4KSTi6&index=7",\n    "https://www.youtube.com/watch?v=w7JTJg5vvY0&list=PLbJrgQUb1-poqvfoyFTo6a05QaM4KSTi6&index=8"\n]\n\nfor link in links:\n    yt = YouTube(link, use_oauth=True, allow_oauth_cache=True)\n    yd = yt.streams.get_highest_resolution()\n    yd.download()\n\n!ls -lh *.mp4\n'})}),"\n",(0,i.jsx)(n.p,{children:"You should see something like this."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"-rw-r--r--  1 alain  staff    45M 29 sep 08:50 44 Notions sur les k-PPV.mp4\n-rw-r--r--  1 alain  staff    16M 29 sep 08:50 45 Efficacit\xe9 computationnelle de k-PPV.mp4\n-rw-r--r--  1 alain  staff    23M 29 sep 08:50 46 S\xe9lection de prototypes.mp4\n-rw-r--r--  1 alain  staff    10M 29 sep 08:50 47 M\xe9thodes non param\xe9triques dans scikit-learn.mp4\n"})}),"\n",(0,i.jsx)(n.h3,{id:"csv",children:"CSV"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cols = ['UNITCOST', 'ID', 'NAME']\ndf[cols].to_csv(file_path, sep=';', index=False)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"device",children:"Device"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if torch.backends.mps.is_available():\n    device = torch.device('mps')\nelif torch.cuda.is_available():\n    device = torch.device('cuda')\nelse:\n    device = torch.device('cpu')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"duplicate",children:"Duplicate"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"cols = ['ID', 'NAME', 'UNITCOST']\ndf = df[cols].drop_duplicates(subset='ID', keep='first')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"execution-time",children:"Execution time"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import time\nstart_time = time.time()\nend_time = time.time()\nprint(f"Execution time: {(end_time - start_time)/60:.1f} minutes")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"excel",children:"Excel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'file_path = "/Users/alain/workspace/filev.xlsx"\n\nworkbook = pd.ExcelFile(file_path)\ntabs = workbook.sheet_names\nprint(pd.DataFrame(tabs))\ndf = pd.read_excel(workbook, sheet_name="Budget").convert_dtypes()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"rename",children:"Rename"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"df = df.rename(columns={'SYSTEM_LINEITEM_UNITCOST': 'TOTAL_UNITCOST'})\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sort",children:"Sort"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"df.sort_values(by='ID', inplace=True)\n\ndf = df.sort_values(by=['UNITCOST', 'EID'], ascending=[False, True])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"group-by",children:"Group by"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"sum_groups = df_unique.groupby(['ID'])['UNITCOST'].sum().reset_index()\n"})}),"\n",(0,i.jsx)(n.h3,{id:"long-example",children:"Long example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\nimport json\nimport requests\nimport math\nfrom copy import deepcopy\n\n# Using "requests" to get IP with error handling\n\ntry:\n    response = requests.get(\'https://api.ipify.org?format=json\')\n    ip_data = json.loads(response.text)\n    my_ip = ip_data["ip"]\n    print(f"Your IP is: {my_ip}")\nexcept requests.ConnectionError:\n    print("Failed to connect to the website!")\nexcept Exception as e:\n    print(f"An unknown error occurred: {e}")\n\n# Data Types\n\n# Immutable Object Types\n\nmy_str = "Hello"\nmy_num = 123\nmy_float = 3.14\nmy_tuple = (4, 5, 6)\n\n# Mutable Object Types:\n\nmy_list = [1, 2, 3]\nmy_set = {7, 8, 9}\nmy_dict = {\'a\': 1, \'b\': 2}\n\n# Careful: mutable variables are passed by reference\n\ndef modify_list(lst):\n    # Appending a new item to the list\n    lst.append(4)\n\n# Test the function\nmy_list = [1, 2, 3]\nmodify_list(my_list)\nprint(my_list)  # Output: [1, 2, 3, 4]\n\n\n# Avoid mutable default arguments with "None"\n# Avoid altering passed variables using deepcopy\n\ndef add_to_list(value, my_list_argument=None):\n    # If no list is provided, use an empty one\n    if my_list_argument is None:\n        my_list = []\n    else:\n        my_list = deepcopy(my_list_argument)\n\n    my_list.append(value)\n    return my_list\n\n# Test the function\noriginal_list = [1, 2, 3]\nnew_list = add_to_list(4, original_list)\n\nprint(original_list)  # Output: [1, 2, 3] - remains unchanged\nprint(new_list)       # Output: [1, 2, 3, 4] - value added to new list\n\n# Built-in Functions & Methods\n\nprint("Hello, World!")  # This is a comment\nmy_str = f"My IP address is {my_ip} and it\'s {len(my_ip)} characters long."\nprint my_str\n\nrounded_down = math.floor(3.6)\nprint(f"Rounded down: {rounded_down}")\n# Prints "Rounded down: 3"\n\n# Data type conversions and String concatenation\n\nnum_str = "15"\nnum_int = 20\nprint(num_str + " + " + str(num_int) + " = " + str(int(num_str) + num_int))\n# Outputs "15 + 20 = 35"\n\n\n# Using decorator functions\n\ndef log_decorator(func):\n    def wrapper(*args, **kwargs):\n        print(f"Calling function: {func.__name__}")\n        return func(*args, **kwargs)\n    return wrapper\n\n@log_decorator\ndef greet(name):\n    return f"Hello, {name}"\n\nprint(greet("Alice"))\n# Prints Two lines:\n# Calling function: greet\n# Hello, Alice\n\n# Classes & OOP\n\nclass Animal:\n    def __init__(self, species):\n        self.species = species\n\nclass Dog(Animal):\n    def bark(self):\n        return "Woof!"\n\ndog = Dog("Canine")\nprint(dog.bark())\n\n\n# Control Structures & List Comprehensions\n\nnumbers = [1, 5, 8, 10] # Sample list of numbers\n\n# Using a for loop to extract odd numbers\nodds = []\nfor num in numbers:\n    if num % 2 != 0:\n        odds.append(num)\n\n# % modulo gives the remainder of a division. If the remainder dividing by 2 is not 0, the number is odd.\n\n# Using a list comprehension to extract even numbers (compact equivalent to the above logic)\nevens = [num for num in numbers if num % 2 == 0]\n\n# Calculate the sum of the even numbers\neven_sum = sum(evens)\n\n# Print results\nprint(f"Odd numbers: {odds}") # 1, 5\nprint(f"Sum of even numbers: {even_sum}") # 18\n\n# Iterating through environment variables\n\n# For loop method\n\nfor key, value in os.environ.items():\n    if key == "SECRET_PASSWORD":\n        print("Encountered sensitive data. Exiting...")\n        break\n    print(f"{key}: {value}")\n\n# While loop method\n\nenv_items = list(os.environ.items())  # Convert dict items to a list\ni = 0\n\nwhile i < len(env_items):\n    key, value = env_items[i]\n    if key == "SECRET_PASSWORD":\n        print("Encountered sensitive data. Exiting...")\n        break\n    print(f"{key}: {value}")\n    i += 1\n\n\n# Grabbing a specific environment variable\n\nenvironment_value = os.getenv("HOME")  # Fetch an environment variable\nprint(f"My home directory is: {environment_value}. String in lowercase: {environment_value.lower()}")\n\nprint("End of Program!")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"regular-expressions",children:"Regular Expressions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import re\n\n# Example string\ntext = "A1-6 - Interior painting - Applied on gypsum partitions"\n\n# Regular expression to match the desired pattern\n# \\w represents an alphanumeric character, \\d a digit, and - a hyphen\npattern = r"\\w\\d-\\d - "\n\n# Replace the found pattern with an empty string\ntext_modified = re.sub(pattern, "", text)\n\nprint(text_modified)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import re\n\npattern = r\"^/wd{1,2}-d{1,2} - \"\ndf['SYSTEM_NAME'] = re.sub(pattern, \"\", df['SYSTEM_NAME'])\n"})}),"\n",(0,i.jsx)(n.h3,{id:"delete-file",children:"Delete file"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import os\n\ndef delete(file_path: str):\n    # Check if the file exists to avoid an error\n    if os.path.exists(file_path):\n        os.remove(file_path)\n        print(f"The file {file_path} has been deleted.")\n    else:\n        print(f"The file {file_path} does not exist.")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"beep",children:"Beep"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from IPython.display import Audio\nimport numpy as np\n\ndef beep(frequency=500, duration=0.1, rate=10000, autoplay=True):\n    """\n    Generates and plays a beep sound.\n\n    :param frequency: The frequency of the beep in Hertz. Defaults to 400 Hz.\n    :param duration: The duration of the beep in seconds. Defaults to 0.5 seconds.\n    :param rate: The sampling rate in samples per second. Defaults to 10000 Hz.\n    :param autoplay: If True, automatically plays the sound. Defaults to True.\n    :return: IPython.display.Audio object.\n    """\n    t = np.linspace(0, duration, int(rate * duration), endpoint=False)  # Generate an array of time points\n    signal = np.sin(2 * np.pi * frequency * t)  # Generate the sound signal\n    return Audio(signal, rate=rate, autoplay=autoplay)\n\n# Use the function to play a beep\nbeep()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"pydantic",children:"pydantic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from pydantic import BaseModel, Field\nfrom typing import Literal\n\nclass Claim(BaseModel):\n    claim_declaration: Literal['True', 'False'] = Field(\n        description=\"According to the claim, is the document authentic or not?\")\n    \n    claim_reasoning: Literal[\n        'metre and style', 'orthography', 'inter-punctuation', 'indentation',\n        'legal formulas', 'terminology', 'document structure', 'language',\n        'spacing', 'signs', 'interpolations', 'chronology'\n    ] = Field(description=\"Choose one or more.\")\n    \n    analysis: Literal[\n        'Scientific analysis', 'Historical analysis', 'Philologic analysis',\n        'Diplomatic analysis', 'Literary analysis', 'Palaeographic analysis'\n    ] = Field(description=\"Choose one or more.\")\n    \n    document_reason: str = Field(description=\"Why has the document been forged?\")\n"})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.pytest.org/en/latest/",children:"pytest"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var i=t(67294);const a={},r=i.createContext(a);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);