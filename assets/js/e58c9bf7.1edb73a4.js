"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4145],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_label:"Python",sidebar_position:2},i="Python",l={unversionedId:"snippets/python",id:"snippets/python",title:"Python",description:"Logging",source:"@site/docs/snippets/python.md",sourceDirName:"snippets",slug:"/snippets/python",permalink:"/docs/snippets/python",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Python",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Interroger un fichier PDF avec ChatGPT",permalink:"/docs/snippets/question-pdf-with-chatgpt"},next:{title:"\ud83e\udd17 Hugging Face",permalink:"/docs/snippets/hugging-face"}},s={},p=[{value:"Logging",id:"logging",level:2},{value:"Random 16-character password",id:"random-16-character-password",level:2},{value:"Virtual environment",id:"virtual-environment",level:2},{value:"Setting up jupyter environment",id:"setting-up-jupyter-environment",level:2},{value:"Run Jupyter server and kernel inside the conda environment",id:"run-jupyter-server-and-kernel-inside-the-conda-environment",level:3},{value:"Create <code>ipython kernel</code> for the conda environment",id:"create-ipython-kernel-for-the-conda-environment",level:3}],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"python"},"Python"),(0,a.kt)("h2",{id:"logging"},"Logging"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import logging\n\n# create logger\nlogger = logging.getLogger(__name__)\n# set log level for all handlers to debug\nlogger.setLevel(logging.INFO)\n\n# example usage\nlogger.debug('debug message')\nlogger.info('info message')\nlogger.warning('warn message')\nlogger.error('error message')\nlogger.critical('critical message')\n")),(0,a.kt)("p",null,"The previous code returns this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-txt"},"INFO:__main__:info message\nWARNING:__main__:warn message\nERROR:__main__:error message\nCRITICAL:__main__:critical message\n")),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://towardsdatascience.com/how-to-setup-logging-for-your-python-notebooks-in-under-2-minutes-2a7ac88d723d"},"How to Setup Logging for your Python Notebooks in under 2 Minutes")," for more."),(0,a.kt)("h2",{id:"random-16-character-password"},"Random 16-character password"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport random\nimport tempfile\n\n# Create a temporary file\nwith tempfile.NamedTemporaryFile(delete=False) as f:\n    # Write a random 16-character password to the file.\n    password = ''.join(random.choice('123456789abcdefghijklmnopqrstuvwxyz') for _ in range(16))\n    f.write(password.encode())\n\n    # Flush the file to make sure the data is written immediately.\n    f.flush()\n\n    # Get the path of the temporary file.\n    temp_file_path = f.name\n\n# Print the path of the temporary file.\nprint(temp_file_path)\n")),(0,a.kt)("h2",{id:"virtual-environment"},"Virtual environment"),(0,a.kt)("p",null,"Create a new Python virtual environment. On Linux/macOS, the command below creates an environment in ",(0,a.kt)("inlineCode",{parentName:"p"},".venv"),",\nactivates it, and install requirements."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"python -m venv .venv\nsource .venv/bin/activate\npip3 install -r test_requirements.txt\n")),(0,a.kt)("h2",{id:"setting-up-jupyter-environment"},"Setting up jupyter environment"),(0,a.kt)("h3",{id:"run-jupyter-server-and-kernel-inside-the-conda-environment"},"Run Jupyter server and kernel inside the conda environment"),(0,a.kt)("p",null,"Create and start the environment using the following commands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"conda env create -f /Users/boisalai/Documents/Learning/books/AAAMLP/environment_osx.yml\nconda activate ml\nconda install jupyter\njupyter notebook\n")),(0,a.kt)("p",null,"To deactivate an active environment, use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"conda deactivate\n")),(0,a.kt)("p",null,"To delete an environment and everything in it, use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"conda env remove --name ml\n")),(0,a.kt)("h3",{id:"create-ipython-kernel-for-the-conda-environment"},"Create ",(0,a.kt)("inlineCode",{parentName:"h3"},"ipython kernel")," for the conda environment"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"conda env create -f /Users/boisalai/Documents/Learning/books/AAAMLP/environment_osx.yml   # creates new virtual env\nconda activate ml   # activate environment in terminal\nconda install ipykernel   # install Python kernel in new conda env\nipython kernel install --user --name=ml-kernel   # configure Jupyter to use Python kernel\n\nconda deactivate          # this step can be omitted by using a different terminal window than before\nconda install jupyter     # optional, might be installed already in system e.g. by 'apt install jupyter' on debian-based systems\njupyter notebook          # run jupyter from system\n")))}u.isMDXComponent=!0}}]);