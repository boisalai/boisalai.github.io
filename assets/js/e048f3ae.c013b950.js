"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([[2714],{64355:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=s(85893),t=s(11151);const i={sidebar_label:"Travail pratique 1",sidebar_position:81,sidebar_class_name:"hidden"},l="Travail pratique 1",a={id:"courses/ift-7022/travail-1",title:"Travail pratique 1",description:"T\xe2che 1 - Extraire des informations d'un document \xe0 l'aide d'expressions r\xe9guli\xe8res",source:"@site/docs/courses/ift-7022/travail-1.md",sourceDirName:"courses/ift-7022",slug:"/courses/ift-7022/travail-1",permalink:"/docs/courses/ift-7022/travail-1",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/courses/ift-7022/travail-1.md",tags:[],version:"current",sidebarPosition:81,frontMatter:{sidebar_label:"Travail pratique 1",sidebar_position:81,sidebar_class_name:"hidden"},sidebar:"tutorialSidebar",previous:{title:"12 Deep NLP - Syst\xe8mes question-r\xe9ponse (QA)",permalink:"/docs/courses/ift-7022/week-12"},next:{title:"Travail pratique 2",permalink:"/docs/courses/ift-7022/travail-2"}},o={},d=[{value:"T\xe2che 1 - Extraire des informations d&#39;un document \xe0 l&#39;aide d&#39;expressions r\xe9guli\xe8res",id:"t\xe2che-1---extraire-des-informations-dun-document-\xe0-laide-dexpressions-r\xe9guli\xe8res",level:2},{value:"Section 1 - Lecture du fichier d&#39;offre de cours",id:"section-1---lecture-du-fichier-doffre-de-cours",level:3},{value:"Section 2 - Extraction des informations de cours \xe0 partir du fichier",id:"section-2---extraction-des-informations-de-cours-\xe0-partir-du-fichier",level:3},{value:"Section 3 - Visualisation des r\xe9sultats de l&#39;extraction d&#39;informations",id:"section-3---visualisation-des-r\xe9sultats-de-lextraction-dinformations",level:3},{value:"Section 4 - \xc9valuation de performance",id:"section-4---\xe9valuation-de-performance",level:3},{value:"T\xe2che 2 - Comme le disait le proverbe - les bons mots pour le dire",id:"t\xe2che-2---comme-le-disait-le-proverbe---les-bons-mots-pour-le-dire",level:2},{value:"Section 1 - Lecture des fichiers de donn\xe9es (proverbes et tests)",id:"section-1---lecture-des-fichiers-de-donn\xe9es-proverbes-et-tests",level:3},{value:"Section 2 - Code pour substituer les masques (\xe9toiles) par des mots",id:"section-2---code-pour-substituer-les-masques-\xe9toiles-par-des-mots",level:3},{value:"Section 3 - Construction des mod\xe8les de langue N-grammes",id:"section-3---construction-des-mod\xe8les-de-langue-n-grammes",level:3},{value:"Section 4 - Compl\xe9ter un proverbe",id:"section-4---compl\xe9ter-un-proverbe",level:3},{value:"Section 5 - Exp\xe9rimentations et analyse de vos r\xe9sultats",id:"section-5---exp\xe9rimentations-et-analyse-de-vos-r\xe9sultats",level:3},{value:"T\xe2che 3 - Classification automatique de descriptions d&#39;incidents",id:"t\xe2che-3---classification-automatique-de-descriptions-dincidents",level:2},{value:"Section 1 - Lecture des fichiers de donn\xe9es",id:"section-1---lecture-des-fichiers-de-donn\xe9es",level:3},{value:"Section 2 - Entra\xeenement et \xe9valuation des mod\xe8les",id:"section-2---entra\xeenement-et-\xe9valuation-des-mod\xe8les",level:3},{value:"Section 3 - \xc0 quoi correspondent les classes? Explicabilit\xe9 du mod\xe8le",id:"section-3---\xe0-quoi-correspondent-les-classes-explicabilit\xe9-du-mod\xe8le",level:3}];function c(e){const n={a:"a",annotation:"annotation",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",math:"math",mi:"mi",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"travail-pratique-1",children:"Travail pratique 1"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import sys\nimport pandas as pd\n\nprint(f"Python version {sys.version}")\nprint(f"pandas {pd.__version__}")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"Python version 3.9.6 (default, May  7 2023, 23:32:44)\n[Clang 14.0.3 (clang-1403.0.22.14.1)]\npandas 2.1.0\n"})}),"\n",(0,r.jsx)(n.h2,{id:"t\xe2che-1---extraire-des-informations-dun-document-\xe0-laide-dexpressions-r\xe9guli\xe8res",children:"T\xe2che 1 - Extraire des informations d'un document \xe0 l'aide d'expressions r\xe9guli\xe8res"}),"\n",(0,r.jsx)(n.p,{children:"Pour cette t\xe2che, on vous demande de construire un programme qui permet d\u2019extraire le mieux possible les informations de l'offre de cours du D\xe9partement d\u2019informatique et g\xe9nie logiciel."}),"\n",(0,r.jsxs)(n.p,{children:["L'exemple utilis\xe9 provient \xe0 l'origine d'un fichier PDF pour la session d'automne 2023 disponible avec ce ",(0,r.jsx)(n.a,{href:"https://www.ift.ulaval.ca/fileadmin/ift/documents/PDF/AUTOMNE_2023.pdf",children:"lien"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Vous travaillerez avec une version texte de ce fichier obtenue avec la librairie Textract."}),"\n",(0,r.jsxs)(n.p,{children:["La fonction principale \xe0 programmer pour cette t\xe2che est ",(0,r.jsx)(n.em,{children:"extract_course_informations"})," qui produit en sortie la structure suivante:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:'[\n  {"Sigle": "GIF-1001", "Section": "H", "Titre": "Ordinateurs: structures et applications", "Credit": "3"},\n  {"Sigle": "GIF-1003", "Section": "A", "Titre": "Programmation avanc\xe9e en C++ pour ing\xe9nieurs", "Credit": "3"},\n     ...\n\n  {"Sigle": "IFT-7201", "Section": "Z3", "Titre": "Apprentissage par renforcement", "Credit": "3"}\n]\n'})}),"\n",(0,r.jsx)(n.p,{children:"ce qui correspond \xe0 une liste de cours offert o\xf9 chacun est d\xe9crit par un dictionnaire Python contenant le sigle du cours, le type de section, son titre et son nombre de cr\xe9dits."}),"\n",(0,r.jsx)(n.p,{children:"On vous demande de documenter votre notebook pour nous permettre de comprendre votre d\xe9marche, c.-\xe0-d. expliquer comment vous proc\xe9dez pour extraire et/ou retirer et/ou assembler les informations. Vous pouvez ajouter des cellules au notebook lorsque vous le jugez n\xe9cessaire."}),"\n",(0,r.jsx)(n.p,{children:"Vous devez utiliser des expressions r\xe9guli\xe8res pour extraire les informations de cours et d\xe9tecter les textes non pertinents (si vous utilisez cette approche). Le reste des op\xe9rations (par ex. l'assemblage des infos) est effectu\xe9 avec du code Python."}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez ajouter autant de fonctions utilitaires que vous voulez pour cette t\xe2che. Cependant on demande DE NE PAS MODIFIER la signature des 2 fonctions suivantes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"extract_course_informations(text_list)"})," , retourne une liste de cours en sortie."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"read_course_information(text_filename)"})," , retourne une liste de textes (des strings)."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Des modifications \xe0 ces fonctions pourraient nuire \xe0 notre correction et des p\xe9nalit\xe9s seront appliqu\xe9es le cas \xe9ch\xe9ant."}),"\n",(0,r.jsx)(n.h3,{id:"section-1---lecture-du-fichier-doffre-de-cours",children:"Section 1 - Lecture du fichier d'offre de cours"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def read_course_information(text_filename):\n    """Retourne une liste de lignes de textes (des strings)."""\n    with open(text_filename, \'r\', encoding=\'utf-8\') as f:\n        text_lines = f.readlines()\n    return text_lines\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'course_fn = "./data/cours_A2023.txt"\n\ncourse_info = read_course_information(course_fn)\ncourse_info\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"    ['Cours de 1er cycle \\n',\n     '\\n',\n     'AUTOMNE 2023 \\n',\n     '\\n',\n     'Cours  Sect.  Titre \\n',\n     'GIF-1001 \\n',\n     'GIF-1003 \\n',\n     'GLO-1111 \\n',\n     'GLO-2000 \\n',\n     'GLO-2004 \\n',\n     'GLO-2100 \\n',\n     'GLO-3100 \\n',\n     'GLO-3101 \\n',\n     'GLO-3102 \\n',\n     'GLO-4001 \\n',\n     'GLO-4002 \\n',\n     'GLO-4003 \\n',\n     'GLO-4008 \\n',\n     'GLO-4035 \\n',\n     'IFT-1000 \\n',\n     'IFT-1003 \\n',\n     'IFT-1004 \\n',\n     'IFT-1004 \\n',\n     'IFT-1006 \\n',\n     'IFT-1111 \\n',\n     'IFT-1701 \\n',\n     'IFT-2001 \\n',\n     'IFT-2002 \\n',\n     'IFT-2003 \\n',\n     'IFT-2004 \\n',\n     'IFT-2007 \\n',\n     'IFT-2008 \\n',\n     'IFT-2103 \\n',\n     'IFT-3001 \\n',\n     'IFT-3101 \\n',\n     'IFT-3201 \\n',\n     'IFT-4001 \\n',\n     'IFT-4022 \\n',\n     'IFT-4030 \\n',\n     'IFT-4201 \\n',\n     'MAT-1919 \\n',\n     'MAT-1919 \\n',\n     '\\n',\n     'Ordinateurs : structures et applications\\n',\n     'Programmation avanc\xe9e en C++ pour ing\xe9nieurs\\n',\n     'Pratique du g\xe9nie logiciel\\n',\n     'R\xe9seaux pour ing\xe9nieurs\\n',\n     'G\xe9nie logiciel orient\xe9 objet\\n',\n     'Algorithmes et structures de donn\xe9es pour ing\xe9nieurs\\n',\n     'Cryptographie et s\xe9curit\xe9 informatique\\n',\n     'Gestion de projets informatiques : m\xe9thodes et outils\\n',\n     \"D\xe9veloppement d'applications Web\\n\",\n     'Introduction \xe0 la robotique mobile\\n',\n     'Qualit\xe9 et m\xe9triques du logiciel\\n',\n     'Architecture logicielle\\n',\n     'Applications infonuagiques natives et DevOps\\n',\n     'Bases de donn\xe9es avanc\xe9es\\n',\n     'Logique et techniques de preuve\\n',\n     'Analyse et conception de syst\xe8mes d\u2019information\\n',\n     'Introduction \xe0 la programmation\\n',\n     'Introduction \xe0 la programmation\\n',\n     'Programmation avanc\xe9e en C++\\n',\n     'Pratique de l\u2019informatique\\n',\n     'Introduction \xe0 l\u2019algorithmique et \xe0 la programmation\\n',\n     'Syst\xe8mes d\u2019exploitation\\n',\n     'Informatique th\xe9orique\\n',\n     'Intelligence artificielle 1\\n',\n     'Mod\xe8les et langages des bases de donn\xe9es\\n',\n     'Analyse et conception des syst\xe8mes orient\xe9s objet\\n',\n     'Algorithmes et structures de donn\xe9es\\n',\n     'Programmation de jeux vid\xe9o\\n',\n     'Conception et analyse d\u2019algorithmes\\n',\n     'Compilation et interpr\xe9tation\\n',\n     'Cyberattaques et tests d\u2019intrusions dans les syst\xe8mes d\u2019information \\n',\n     'Optimisation combinatoire\\n',\n     'Traitement automatique de la langue naturelle\\n',\n     'Apprentissage automatique pour le traitement du signal   Nouveau cours \\n',\n     'Apprentissage par renforcement \\n',\n     'Math\xe9matiques pour informaticien\\n',\n     'Math\xe9matiques pour informaticien\\n',\n     '\\n',\n     'H \\n',\n     'A \\n',\n     'ZA \\n',\n     'A \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'ZA \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'A \\n',\n     'A \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'ZA \\n',\n     'A \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'Z1 \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     'A \\n',\n     'Z3 \\n',\n     '\\n',\n     'Cours de 2e et 3e cycles \\n',\n     'GLO-7008 \\n',\n     'GLO-7021 \\n',\n     'GLO-7035 \\n',\n     'IFT-6002 \\n',\n     'IFT-6003 \\n',\n     'IFT-6005 \\n',\n     'IFT-7009 \\n',\n     'IFT-7020 \\n',\n     'IFT-7022 \\n',\n     'IFT-7030 \\n',\n     '\\n',\n     'A \\n',\n     'A \\n',\n     'Z3 \\n',\n     'Z3 \\n',\n     'A \\n',\n     'A \\n',\n     'A \\n',\n     'A \\n',\n     'Z3 \\n',\n     'A \\n',\n     '\\n',\n     'IFT-7201 \\n',\n     '\\n',\n     'Z3 \\n',\n     '\\n',\n     'Applications infonuagiques natives et DevOps (jumel\xe9 avec GLO-4008)\\n',\n     'Introduction \xe0 la robotique mobile (jumel\xe9 avec GLO-4001) \\n',\n     'Bases de donn\xe9es avanc\xe9es (jumel\xe9 avec GLO-4035)\\n',\n     'Assurance qualit\xe9 du logiciel (jumel\xe9 avec GLO-4002)\\n',\n     'Architecture logicielle (jumel\xe9 avec GLO-4003)\\n',\n     'Projet int\xe9grateur \\n',\n     'R\xe9seaux mobiles \\n',\n     'Optimisation combinatoire (jumel\xe9 avec IFT-4001)\\n',\n     'Traitement automatique de la langue naturelle (jumel\xe9 avec IFT-4022)\\n',\n     'Apprentissage automatique pour le traitement du signal Nouveau cours \\n',\n     '(jumel\xe9 avec IFT-4030)\\n',\n     'Apprentissage par renforcement (jumel\xe9 avec IFT-4201)\\n',\n     '\\n',\n     '# cr.\\n',\n     '\\n',\n     '3\\n',\n     '3\\n',\n     '0\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '0\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3 \\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '6\\n',\n     '3\\n',\n     '3\\n',\n     '3\\n',\n     '\\n',\n     '3\\n',\n     '3\\n',\n     '\\n',\n     '\\x0cSignification des types de sections  \\n',\n     '\\n',\n     '- A : section en classe;  \\n',\n     '- Z1 : section \xe0 distance asynchrone;  \\n',\n     '- Z3 : section \xe0 distance synchrone;  \\n',\n     '- ZA : section en formule comodale; correspond \xe0 section Z3 avec possibilit\xe9 d\u2019assister \xe0 \\n',\n     'l\u2019enregistrement du cours dans une classe; \\n',\n     '- H : hybride, certaines s\xe9ances en pr\xe9sentiel, d\u2019autres \xe0 distance. \\n',\n     ' \\n',\n     'Note : en jaune; nouveaux cours offerts \xe0 la session d\u2019automne 2023. \\n',\n     ' \\n',\n     '\\n',\n     '\\x0c']\n"})}),"\n",(0,r.jsx)(n.h3,{id:"section-2---extraction-des-informations-de-cours-\xe0-partir-du-fichier",children:"Section 2 - Extraction des informations de cours \xe0 partir du fichier"}),"\n",(0,r.jsx)(n.p,{children:"On vous demande de mettre toutes les expressions r\xe9guli\xe8res que vous utilisez dans la premi\xe8re cellule."}),"\n",(0,r.jsxs)(n.p,{children:["Par la suite, vous pouvez ajouter toutes les fonctions utilitaires dont vous avez besoin. Et vous terminez en finalisant la fonction principale ",(0,r.jsx)(n.em,{children:"extract_course_informations"}),". Vous pouvez ajouter des cellules dans le notebook."]}),"\n",(0,r.jsx)(n.p,{children:"Expliquer comment vous proc\xe9dez pour extraire les informations et construire la liste de cours. Une part importante de point est allou\xe9e aux explications."}),"\n",(0,r.jsx)(n.p,{children:'Ci-dessous, les patrons "regex" que j\'utilise pour identifier :'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'la cha\xeene "Nouveau cours" qui peut \xeatre supprim\xe9e;'}),"\n",(0,r.jsx)(n.li,{children:'la cha\xeene "(jumel\xe9 avec [sigle])" qui peut \xeatre supprim\xe9e;'}),"\n",(0,r.jsx)(n.li,{children:'les autres cha\xeenes qui peuvent \xeatre supprim\xe9es, comme les espaces en fin de ligne, les cha\xeenes qui d\xe9butent par "Cours" ou par au moins 5 lettres majuscules repr\xe9sentant de toute \xe9vidence la session universitaire (ex. AUTOMNE, HIVER...);'}),"\n",(0,r.jsx)(n.li,{children:"les sigles, soit 3 caract\xe8res majuscules de A \xe0 Z, suivis d'un trait-d'union, suivis de 4 chiffres, suivis d'un espace et d'une fin de ligne;"}),"\n",(0,r.jsx)(n.li,{children:"les sections, soit A, Z1, Z3, Z4 ou H;"}),"\n",(0,r.jsx)(n.li,{children:"les titres, soit une cha\xeene de caract\xe8res d'au moins 10 de long;"}),"\n",(0,r.jsx)(n.li,{children:"les cr\xe9dits, soit 0, 3 ou 6, suivi ou non d'un espace, suivi d'une fin de ligne."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Mettre dans cette partie les expressions r\xe9guli\xe8res que vous utilisez\n\nimport re\n\n# Mettre vos regex ici...\n\n# Ci-dessous, les patterns regex pour identifier respectivement\n# la cha\xeene "Nouveau cours", la cha\xeene "jumel\xe9 avec [sigle]",\n# les espaces \xe0 la fin qui peuvent \xeatre coup\xe9s,\n# les sigles, les sections, les titres et les cr\xe9dits.\nnouveau_cours_pattern = r"\\s+Nouveau cours"\njumele_avec_pattern = r"\\(jumel\xe9 avec [A-Z]{3}-\\d{4}\\)"\ntrim_pattern = r"\\s+$|^Cours.+|[A-Z]{5}.+"\nsigle_pattern = r"^[A-Z]{3}-\\d{4}$"\nsection_pattern = r"^(A|Z1|Z3|ZA|H)$"\ntitre_pattern = r".{10,}"\ncredit_pattern = r"^(0|3|6)$"\n'})}),"\n",(0,r.jsx)(n.p,{children:"J'explique ici ma d\xe9marche pour cr\xe9er la fonction principale d'extractions d'informations."}),"\n",(0,r.jsxs)(n.p,{children:["J'ai examin\xe9 la structure du fichier ",(0,r.jsx)(n.code,{children:"data/cours_A2023.txt"})," et j'ai remarqu\xe9 ceci :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Le fichier contient successivement :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"37 sigles (lignes 6 \xe0 42),"}),"\n",(0,r.jsx)(n.li,{children:"37 titres (lignes 44 \xe0 80),"}),"\n",(0,r.jsx)(n.li,{children:"37 sections (lignes 82 \xe0 118),"}),"\n",(0,r.jsx)(n.li,{children:"10 sigles (lignes 121 \xe0 130),"}),"\n",(0,r.jsx)(n.li,{children:"10 sections (lignes 132 \xe0 141),"}),"\n",(0,r.jsx)(n.li,{children:"1 sigle (ligne 143),"}),"\n",(0,r.jsx)(n.li,{children:"1 section (ligne 145),"}),"\n",(0,r.jsx)(n.li,{children:"11 titres (lignes 147 \xe0 158, dont un titre apparaissant sur deux lignes),"}),"\n",(0,r.jsx)(n.li,{children:"37 cr\xe9dits (lignes 162 \xe0 198),"}),"\n",(0,r.jsx)(n.li,{children:"9 cr\xe9dits (lignes 200 \xe0 208),"}),"\n",(0,r.jsx)(n.li,{children:"2 cr\xe9dits (lignes 210 et 211)."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Au total, je compte 48 sigles, 48 titres, 48 sections et 48 cr\xe9dits."}),"\n",(0,r.jsxs)(n.li,{children:["Ces observations me permettent du supposer que les sigles, les titres, les sections et les cr\xe9dits sont pr\xe9sent\xe9s dans le m\xeame ordre, c'est-\xe0-dire que le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me sigle, le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me titre, la ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me section et le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me cr\xe9dit sont li\xe9s au ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me cours."]}),"\n",(0,r.jsxs)(n.li,{children:["Le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me sigle est toujours pr\xe9sent\xe9 avant le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me titre, la ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me section ou le ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),"-i\xe8me cr\xe9dit."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Consid\xe9rant ces observations, j'ai utilis\xe9 la d\xe9marche suivante :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Je parcours chaque \xe9l\xe9ment (",(0,r.jsx)(n.code,{children:"text"}),") de la liste de textes (",(0,r.jsx)(n.code,{children:"text_list"}),") avec une boucle ",(0,r.jsx)(n.code,{children:"for"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:["\xc0 chaque \xe9l\xe9ment de la liste :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Je supprime d'abord les cha\xeenes de caract\xe8res correspondant aux expressions r\xe9guli\xe8res ",(0,r.jsx)(n.code,{children:"nouveau_cours_pattern"}),", ",(0,r.jsx)(n.code,{children:"jumele_avec_pattern"})," et ",(0,r.jsx)(n.code,{children:"trim_pattern"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Je d\xe9termine si la ligne contient un sigle. Si oui, j'extrais le sigle et l'ajoute \xe0 une liste de sigles."}),"\n",(0,r.jsx)(n.li,{children:"Sinon, je d\xe9termine si la ligne contient une section. Si oui, j'extrais la section et l'ajoute \xe0 une liste de sections."}),"\n",(0,r.jsx)(n.li,{children:"Sinon, je d\xe9termine si la ligne contient un titre. Si oui, j'extrais le titre et l'ajoute \xe0 une liste de titres."}),"\n",(0,r.jsx)(n.li,{children:"Sinon, je d\xe9termine si la ligne contient un cr\xe9dit. Si oui, j'extrais le cr\xe9dit et l'ajoute \xe0 une liste de cr\xe9dits."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["J'obtiens alors 4 listes nomm\xe9es ",(0,r.jsx)(n.code,{children:"sigles"}),", ",(0,r.jsx)(n.code,{children:"sections"}),", ",(0,r.jsx)(n.code,{children:"titres"})," et ",(0,r.jsx)(n.code,{children:"credits"})," respectivement de longueur 48, 48, 56 et 48.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"J'obtiens plus de titres que de sigles mais cela n'est pas tellement grave... en autant que je ne conserve pas plus de titres que de sigles."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Enfin, je cr\xe9e une liste de cours en conservant que les ",(0,r.jsx)(n.code,{children:"N"})," premiers \xe9l\xe9ments des listes ",(0,r.jsx)(n.code,{children:"sigles"}),", ",(0,r.jsx)(n.code,{children:"sections"}),", ",(0,r.jsx)(n.code,{children:"titres"})," et ",(0,r.jsx)(n.code,{children:"credits"})," avec ",(0,r.jsx)(n.code,{children:"N=len(sigles)"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"La performance de mon algorithme est excellente car les extractions sont tous identiques \xe0 la solution. Les r\xe9sultats sont pr\xe9sent\xe9s ci-dessous :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"48: Nombre de sigles correctement extraits\n48: Nombre de sections correctement extraites et associ\xe9es au bon sigle de cours\n48: Nombre de titres corrects\n48: Nombre de titres correctement associ\xe9s au sigle de cours\n48: Nombre de cr\xe9dits correctement associ\xe9s au sigle de cours\n48: Nombre de bonnes descriptions compl\xe8tes de cours\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def extract_course_informations(text_list):\n    # Cette fonction construit la liste de cours \xe0 partir du texte en entr\xe9e (une liste de lignes de textes).\n    # Chaque coursest un dictionnaire qui contient les informations pertinentes (sigle, section, titre, cr\xe9dit).\n    #\n    # Ins\xe9rez ici votre code pour la production de la liste de cours...\n\n    # Cr\xe9er des listes vides pour les sigles, sections, titres et cr\xe9dits.\n    sigles = []\n    sections = []\n    titres = []\n    credits = []\n\n    # Appliquer les expressions r\xe9guli\xe8res \xe0 chaque \xe9l\xe9ment de la liste\n    for text in text_list:\n        # Supprimer certaines cha\xeenes.\n        text = re.sub(nouveau_cours_pattern, '', text)\n        text = re.sub(jumele_avec_pattern, '', text)\n        text = re.sub(trim_pattern, '', text)\n\n        # Est-ce un sigle?\n        match = re.match(sigle_pattern, text)\n        if match:\n            sigle = match.group()\n            sigles.append(sigle)\n            continue\n\n        # Est-ce une section?\n        match = re.match(section_pattern, text)\n        if match:\n            section = match.group()\n            sections.append(section)\n            continue\n\n        # Est-ce un titre?\n        match = re.match(titre_pattern, text)\n        if match:\n            titre = match.group()\n            titres.append(titre)\n            continue\n\n        # Est-ce un cr\xe9dit?\n        match = re.match(credit_pattern, text)\n        if match:\n            credit = match.group()\n            credits.append(int(credit))\n\n    # Cr\xe9er la liste de cours en utilisant les N premiers \xe9l\xe9ments de chaque liste\n    # avec n \xe9tant \xe9gale au nombre de sigles.\n    n = len(sigles)\n    courses = [[sigles[i], sections[i], titres[i], credits[i]] for i in range(n)]\n\n    return courses\n"})}),"\n",(0,r.jsx)(n.h3,{id:"section-3---visualisation-des-r\xe9sultats-de-lextraction-dinformations",children:"Section 3 - Visualisation des r\xe9sultats de l'extraction d'informations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"courses = extract_course_informations(course_info)   # La liste de cours extraites \xe0 partir du texte\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\ndef get_dataframe(course_info):\n    return pd.DataFrame.from_dict(course_info, orient='columns', dtype=None, columns=None)\n\ndf = get_dataframe(courses)\ndf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\ndef get_dataframe(course_info):\n    df = pd.DataFrame(course_info)\n    df.columns =['Sigle', 'Section', 'Titre', 'Credit']\n    return df\n\ndf = get_dataframe(courses)\ndf\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ci-dessous, du code utile pour inspecter le dataframe que j'ai cr\xe9\xe9."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Informations sur le dataframe.\ndf.info(verbose=True)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"RangeIndex: 48 entries, 0 to 47\nData columns (total 4 columns):\n    #   Column   Non-Null Count  Dtype\n---  ------   --------------  -----\n    0   Sigle    48 non-null     object\n    1   Section  48 non-null     object\n    2   Titre    48 non-null     object\n    3   Credit   48 non-null     int64\ndtypes: int64(1), object(3)\nmemory usage: 1.6+ KB\n"})}),"\n",(0,r.jsx)(n.h3,{id:"section-4---\xe9valuation-de-performance",children:"Section 4 - \xc9valuation de performance"}),"\n",(0,r.jsx)(n.p,{children:"\xc9valuez la performance de votre programme dans cette section. Ceci peut \xeatre fait \xe0 la main ou par programmation selon ce qui vous convient le mieux."}),"\n",(0,r.jsx)(n.p,{children:"R\xe9sultats \xe0 pr\xe9senter :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Nombre de sigles correctement extraits"}),"\n",(0,r.jsx)(n.li,{children:"Nombre de sections correctement extraites et associ\xe9es au bon sigle de cours"}),"\n",(0,r.jsx)(n.li,{children:"Nombre de titres corrects, c.-\xe0-d. un texte complet sans commentaires additionnels sur la nouveaut\xe9 ou le jumelage"}),"\n",(0,r.jsx)(n.li,{children:"Nombre de titres correctement associ\xe9s au sigle de cours"}),"\n",(0,r.jsx)(n.li,{children:"Nombre de cr\xe9dits correctement associ\xe9s au sigle de cours"}),"\n",(0,r.jsx)(n.li,{children:"Nombre de bonnes descriptions compl\xe8tes de cours. Par exemple, pour l'automne 2023, il y a un total de 48 cours dans le fichier. Indiquez le nombre de cours dont tous les attributs extraits sont corrects."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Analyser les erreurs effectu\xe9es par votre programme. Vous pouvez ajouter au besoin des cellules dans cette section du notebook."}),"\n",(0,r.jsx)(n.p,{children:"Pour \xe9valuer la performance de mon code, j'effectue les \xe9tapes suivantes :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cr\xe9er un dataframe avec le fichier JSON contenant la solution."}),"\n",(0,r.jsx)(n.li,{children:"Fusionner ce datafranme contenant la solution avec mon dataframe que j'ai cr\xe9\xe9 pr\xe9c\xe9demment."}),"\n",(0,r.jsx)(n.li,{children:"Identifier les \xe9galit\xe9s sur les colonnes Sigle, Section, Titre et Credit entre la solution et mon dataframe."}),"\n",(0,r.jsx)(n.li,{children:"Afficher les r\xe9sultats."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Les r\xe9sultats obtenus sont parfaite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Cr\xe9er un dataframe avec la solution.\ndf_sol = pd.read_json("./data/cours_A2023_solution.json")\nprint(f"Nombre de cours: {len(df_sol)}")\n# Nombre de cours: 48\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Fusionner les deux dataframes: le mien et la solution.\ndf_eval = df.join(df_sol, rsuffix='_sol')\ndf_eval.head()\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Sigle"}),(0,r.jsx)(n.th,{children:"Section"}),(0,r.jsx)(n.th,{children:"Titre"}),(0,r.jsx)(n.th,{children:"Credit"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GIF-1001"}),(0,r.jsx)(n.td,{children:"H"}),(0,r.jsx)(n.td,{children:"Ordinateurs : structures et applications"}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GIF-1003"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"Programmation avanc\xe9e en C++ pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-1111"}),(0,r.jsx)(n.td,{children:"ZA"}),(0,r.jsx)(n.td,{children:"Pratique du g\xe9nie logiciel"}),(0,r.jsx)(n.td,{children:"0"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-2000"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"R\xe9seaux pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-2004"}),(0,r.jsx)(n.td,{children:"Z3"}),(0,r.jsx)(n.td,{children:"G\xe9nie logiciel orient\xe9 objet"}),(0,r.jsx)(n.td,{children:"3"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Identifier les \xe9galit\xe9s.\nsigle_equal = df_eval['Sigle'] == df_eval['Sigle_sol']\nsection_equal = df_eval['Section'] == df_eval['Section_sol']\ntitre_equal = df_eval['Titre'] == df_eval['Titre_sol']\ncredit_equal = df_eval['Credit'] == df_eval['Credit_sol']\n\n# Calculer les nombres d'\xe9galit\xe9s indiqu\xe9s dans l'\xe9nonc\xe9.\n# q1: Nombre de sigles correctement extraits.\ndf_eval['q1'] = (sigle_equal).astype(int)\n\n# q2: Nombre de sections correctement extraites et associ\xe9es au bon sigle de cours.\ndf_eval['q2'] = (sigle_equal & section_equal).astype(int)\n\n# q3: Nombre de titres corrects, c.-\xe0-d. un texte complet sans commentaires\n# additionnels sur la nouveaut\xe9 ou le jumelage.\ndf_eval['q3'] = (titre_equal).astype(int)\n\n# q4: Nombre de titres correctement associ\xe9s au sigle de cours.\ndf_eval['q4'] = (sigle_equal & titre_equal).astype(int)\n\n# q5: Nombre de cr\xe9dits correctement associ\xe9s au sigle de cours.\ndf_eval['q5'] = (sigle_equal & credit_equal).astype(int)\n\n# q6: Nombre de bonnes descriptions compl\xe8tes de cours. Par exemple, pour l'automne 2023,\n# il y a un total de 48 cours dans le fichier. Indiquez le nombre de cours dont tous les\n# attributs extraits sont corrects.\ndf_eval['q6'] = (sigle_equal & section_equal & titre_equal & credit_equal).astype(int)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"df_eval.head()\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Sigle"}),(0,r.jsx)(n.th,{children:"Section"}),(0,r.jsx)(n.th,{children:"Titre"}),(0,r.jsx)(n.th,{children:"Credit"}),(0,r.jsx)(n.th,{children:"Sigle_sol"}),(0,r.jsx)(n.th,{children:"Section_sol"}),(0,r.jsx)(n.th,{children:"Titre_sol"}),(0,r.jsx)(n.th,{children:"Credit_sol"}),(0,r.jsx)(n.th,{children:"q1"}),(0,r.jsx)(n.th,{children:"q2"}),(0,r.jsx)(n.th,{children:"q3"}),(0,r.jsx)(n.th,{children:"q4"}),(0,r.jsx)(n.th,{children:"q5"}),(0,r.jsx)(n.th,{children:"q6"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GIF-1001"}),(0,r.jsx)(n.td,{children:"H"}),(0,r.jsx)(n.td,{children:"Ordinateurs : structures et applications"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"GIF-1001"}),(0,r.jsx)(n.td,{children:"H"}),(0,r.jsx)(n.td,{children:"Ordinateurs : structures et applications"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GIF-1003"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"Programmation avanc\xe9e en C++ pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"GIF-1003"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"Programmation avanc\xe9e en C++ pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-1111"}),(0,r.jsx)(n.td,{children:"ZA"}),(0,r.jsx)(n.td,{children:"Pratique du g\xe9nie logiciel"}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"GLO-1111"}),(0,r.jsx)(n.td,{children:"ZA"}),(0,r.jsx)(n.td,{children:"Pratique du g\xe9nie logiciel"}),(0,r.jsx)(n.td,{children:"0"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-2000"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"R\xe9seaux pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"GLO-2000"}),(0,r.jsx)(n.td,{children:"A"}),(0,r.jsx)(n.td,{children:"R\xe9seaux pour ing\xe9nieurs"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GLO-2004"}),(0,r.jsx)(n.td,{children:"Z3"}),(0,r.jsx)(n.td,{children:"G\xe9nie logiciel orient\xe9 objet"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"GLO-2004"}),(0,r.jsx)(n.td,{children:"Z3"}),(0,r.jsx)(n.td,{children:"G\xe9nie logiciel orient\xe9 objet"}),(0,r.jsx)(n.td,{children:"3"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"}),(0,r.jsx)(n.td,{children:"1"})]})]})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Afficher les r\xe9sultats.\ndef count(question: str, text: str)  -> None:\n    print(f"{df_eval[question].sum()}: {text}.")\n\ncount("q1", "Nombre de sigles correctement extraits")\ncount("q2", "Nombre de sections correctement extraites et associ\xe9es au bon sigle de cours")\ncount("q3", "Nombre de titres corrects")\ncount("q4", "Nombre de titres correctement associ\xe9s au sigle de cours")\ncount("q5", "Nombre de cr\xe9dits correctement associ\xe9s au sigle de cours")\ncount("q6", "Nombre de bonnes descriptions compl\xe8tes de cours")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"48: Nombre de sigles correctement extraits.\n48: Nombre de sections correctement extraites et associ\xe9es au bon sigle de cours.\n48: Nombre de titres corrects.\n48: Nombre de titres correctement associ\xe9s au sigle de cours.\n48: Nombre de cr\xe9dits correctement associ\xe9s au sigle de cours.\n48: Nombre de bonnes descriptions compl\xe8tes de cours.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"t\xe2che-2---comme-le-disait-le-proverbe---les-bons-mots-pour-le-dire",children:"T\xe2che 2 - Comme le disait le proverbe - les bons mots pour le dire"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import sys\nimport pandas as pd\nimport nltk\n\nprint(f"Python version {sys.version}")\nprint(f"pandas {pd.__version__}")\nprint(f"NLTK {nltk.__version__}")\n'})}),"\n",(0,r.jsxs)(n.p,{children:["L'objectif de cette t\xe2che est de compl\xe9ter des proverbes \xe0 l'aide de mod\xe8les de langue N-grammes en ins\xe9rant des mots aux bons endroits dans un texte masqu\xe9. Il s'agit d'une t\xe2che de type ",(0,r.jsx)(n.em,{children:"cloze test"})," qui consiste \xe0 choisir le meilleur mot \xe0 ins\xe9rer dans un texte en fonction de son contexte."]}),"\n",(0,r.jsx)(n.p,{children:"Voir l'\xe9nonc\xe9 du travail #1 pour une description plus d\xe9taill\xe9e de cette t\xe2che."}),"\n",(0,r.jsx)(n.p,{children:"Fichiers:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"proverbes.txt"}),": il contient plus de 3000 proverbes, un par ligne de texte. Pour l'entra\xeenement des mod\xe8les de langues N-grammes."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"test_proverbes_v1.json"}),": il contient des proverbes masqu\xe9s, les mots \xe0 ins\xe9rer et la bonne formulation du proverbe. \xc0 utiliser pour \xe9valuer la capacit\xe9 des mod\xe8les \xe0 mettre les mots aux bons endroits."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Consignes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Utilisez NLTK pour construire les mod\xe8les de langue."}),"\n",(0,r.jsx)(n.li,{children:"Utilisez des expressions r\xe9guli\xe8res (une seule ou plusieurs) pour remplacer les * et les ** par des mots."}),"\n",(0,r.jsx)(n.li,{children:"Utilisez NLTK pour faire la tokenisation des proverbes."}),"\n",(0,r.jsxs)(n.li,{children:["N'oubliez pas de faire le ",(0,r.jsx)(n.em,{children:"padding"})," des proverbes avec des symboles de d\xe9but <BOS> et de fin <EOS>."]}),"\n",(0,r.jsxs)(n.li,{children:["Ne pas modifier les fonctions ",(0,r.jsx)(n.em,{children:"load_proverbs"})," et ",(0,r.jsx)(n.em,{children:"load_tests"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Ne pas modifier la signature de la fonction ",(0,r.jsx)(n.em,{children:"replace_stars_with_words"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Utilisez la variable ",(0,r.jsx)(n.em,{children:"models"})," pour conserver les mod\xe8les apr\xe8s entra\xeenement."]}),"\n",(0,r.jsxs)(n.li,{children:["Ne pas modifier la signature de la fonction ",(0,r.jsx)(n.em,{children:"train_models"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Ne pas modifier la signature de la fonction ",(0,r.jsx)(n.em,{children:"fill_masked_proverb"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Des modifications aux signatures pourraient entra\xeener des d\xe9ductions dans la correction."}),"\n",(0,r.jsx)(n.li,{children:"Vous pouvez ajouter des cellules au notebook et toutes les fonctions utilitaires que vous voulez."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"section-1---lecture-des-fichiers-de-donn\xe9es-proverbes-et-tests",children:"Section 1 - Lecture des fichiers de donn\xe9es (proverbes et tests)"}),"\n",(0,r.jsx)(n.p,{children:"Je n'ai aucun commentaire ici puisqu'on n'a aucune modification \xe0 faire."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import json\n\n# Ne pas modifier le chemin de ces 2 fichiers pour faciliter notre correction\nproverbs_fn = \"./data/proverbes.txt\"\ntest_v1_fn = './data/test_proverbes_v1.json'\n\ndef load_proverbs(filename):\n    with open(filename, 'r', encoding='utf-8') as f:\n        raw_lines = f.readlines()\n    return [x.strip() for x in raw_lines]\n\ndef load_tests(filename):\n    with open(filename, 'r', encoding='utf-8') as fp:\n        test_data = json.load(fp)\n    return test_data\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"proverbs = load_proverbs(proverbs_fn)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'print("Nombre de proverbes pour l\'entra\xeenement: {}".format(len(proverbs)))\nprint("Un exemple de proverbe: " + proverbs[5])\n# Nombre de proverbes pour l\'entra\xeenement: 3108\n# Un exemple de proverbe: accord vaut mieux qu\u2019argent\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"tests = load_tests(test_v1_fn)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pandas as pd\n\ndef get_dataframe(test_proverbs):\n    return pd.DataFrame.from_dict(test_proverbs, orient='columns', dtype=None, columns=None)\n\ndf = get_dataframe(tests)\ndf.head()\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Masked"}),(0,r.jsx)(n.th,{children:"Word_list"}),(0,r.jsx)(n.th,{children:"Proverb"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"a beau * qui ** de loin"}),(0,r.jsx)(n.td,{children:"[vient, mentir]"}),(0,r.jsx)(n.td,{children:"a beau mentir qui vient de loin"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"a * mentir qui vient de **"}),(0,r.jsx)(n.td,{children:"[beau, loin]"}),(0,r.jsx)(n.td,{children:"a beau mentir qui vient de loin"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"l\u2019* fait le **"}),(0,r.jsx)(n.td,{children:"[larron, occasion]"}),(0,r.jsx)(n.td,{children:"l\u2019occasion fait le larron"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.em,{children:"-toi, le ciel t\u2019"}),"*"]}),(0,r.jsx)(n.td,{children:"[aidera, aide]"}),(0,r.jsx)(n.td,{children:"aide-toi, le ciel t\u2019aidera"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ann\xe9e de *, ** de bl\xe9"}),(0,r.jsx)(n.td,{children:"[ann\xe9e, gel\xe9e]"}),(0,r.jsx)(n.td,{children:"ann\xe9e de gel\xe9e, ann\xe9e de bl\xe9"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"section-2---code-pour-substituer-les-masques-\xe9toiles-par-des-mots",children:"Section 2 - Code pour substituer les masques (\xe9toiles) par des mots"}),"\n",(0,r.jsx)(n.p,{children:"Expliquez ici comment vous proc\xe9dez pour remplacer les \xe9toiles des proverbes masqu\xe9s par des mots... N'oubliez pas qu'il faut faire usage d'expressions r\xe9guli\xe8res (une ou plusieurs - au choix)."}),"\n",(0,r.jsx)(n.p,{children:"Pour remplacer les \xe9toiles des proverbes masqu\xe9s par des mots avec des expressions r\xe9guli\xe8res, j'effectue ces deux \xe9tapes dans l'ordre :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["D'abord, je remplace le double ast\xe9rix ",(0,r.jsx)(n.code,{children:"**"})," par ",(0,r.jsx)(n.code,{children:"word2"})," en utilisant l'expression r\xe9guli\xe8re ",(0,r.jsx)(n.code,{children:'r"\\*\\*"'}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Puis, je remplace le simple ast\xe9rix ",(0,r.jsx)(n.code,{children:"*"})," par ",(0,r.jsx)(n.code,{children:"word1"})," en utilisant l'expression r\xe9guli\xe8re ",(0,r.jsx)(n.code,{children:'r"\\*"'}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Ces deux lignes de code sont ajout\xe9es \xe0 la fonction ",(0,r.jsx)(n.code,{children:"replace_starts_with_words()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'proverb = re.sub(r"\\*\\*", word2, masked)\nproverb = re.sub(r"\\*", word1, proverb)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["J'ai ajout\xe9 une seconde cellule ci-dessous pour voir si la fonction modifi\xe9e ",(0,r.jsx)(n.code,{children:"replace_stars_with_words()"})," fonctionne correctement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import re\n\ndef replace_stars_with_words(masked, word1, word2):\n    """Remplace les * par word1 et word2 dans cet ordre. Retourne le proverbe complet."""\n    # votre code\n    proverb = re.sub(r"\\*\\*", word2, masked)\n    proverb = re.sub(r"\\*", word1, proverb)\n\n    return proverb  # Retourne le proverbe avec des mots \xe0 la place des \xe9toiles\n'})}),"\n",(0,r.jsxs)(n.p,{children:["L'instruction ci-dessous permet de voir que la fonction ",(0,r.jsx)(n.code,{children:"replace_stars_with_words()"})," fonctionne correctement."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Appliquer la fonction \xe0 chaque ligne du DataFrame et cr\xe9er une nouvelle colonne\ndf['Reconstructed_Proverb'] = df.apply(\n    lambda row: replace_stars_with_words(row['Masked'], row['Word_list'][0],\n                                         row['Word_list'][1]), axis=1)\ndf.head()\n"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Masked"}),(0,r.jsx)(n.th,{children:"Word_list"}),(0,r.jsx)(n.th,{children:"Proverb"}),(0,r.jsx)(n.th,{children:"Reconstructed_Proverb"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"a beau * qui ** de loin"}),(0,r.jsx)(n.td,{children:"[vient, mentir]"}),(0,r.jsx)(n.td,{children:"a beau mentir qui vient de loin"}),(0,r.jsx)(n.td,{children:"a beau vient qui mentir de loin"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"a * mentir qui vient de **"}),(0,r.jsx)(n.td,{children:"[beau, loin]"}),(0,r.jsx)(n.td,{children:"a beau mentir qui vient de loin"}),(0,r.jsx)(n.td,{children:"a beau mentir qui vient de loin"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"l\u2019* fait le **"}),(0,r.jsx)(n.td,{children:"[larron, occasion]"}),(0,r.jsx)(n.td,{children:"l\u2019occasion fait le larron"}),(0,r.jsx)(n.td,{children:"l\u2019larron fait le occasion"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.em,{children:"-toi, le ciel t\u2019"}),"*"]}),(0,r.jsx)(n.td,{children:"[aidera, aide]"}),(0,r.jsx)(n.td,{children:"aide-toi, le ciel t\u2019aidera"}),(0,r.jsx)(n.td,{children:"aidera-toi, le ciel t\u2019aide"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"ann\xe9e de *, ** de bl\xe9"}),(0,r.jsx)(n.td,{children:"[ann\xe9e, gel\xe9e]"}),(0,r.jsx)(n.td,{children:"ann\xe9e de gel\xe9e, ann\xe9e de bl\xe9"}),(0,r.jsx)(n.td,{children:"ann\xe9e de ann\xe9e, gel\xe9e de bl\xe9"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"section-3---construction-des-mod\xe8les-de-langue-n-grammes",children:"Section 3 - Construction des mod\xe8les de langue N-grammes"}),"\n",(0,r.jsxs)(n.p,{children:["La fonction ",(0,r.jsx)(n.em,{children:(0,r.jsx)(n.strong,{children:"train_models"})})," prend en entr\xe9e une liste de proverbes et construit les trois mod\xe8les unigramme, bigramme et trigramme."]}),"\n",(0,r.jsxs)(n.p,{children:["Les 3 mod\xe8les entra\xeen\xe9s sont conserv\xe9s dans ",(0,r.jsx)(n.em,{children:"models"}),", un dictionnaire Python qui prend la forme"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"{\n   1: modele_unigramme,\n   2: modele_bigramme,\n   3: modele_trigramme\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"avec comme cl\xe9 la valeur N du mod\xe8le et comme valeur le mod\xe8le construit par NLTK."}),"\n",(0,r.jsx)(n.p,{children:"Expliquez ici comment vous proc\xe9der pour construire vos mod\xe8les avec NLTK, pour obtenir les n-grammes de mots, pour d\xe9terminer le vocabulaire, etc..."}),"\n",(0,r.jsx)(n.p,{children:"Voici une explication de ma d\xe9marche pour construire les mod\xe8les N-grammes avec NTLK."}),"\n",(0,r.jsx)(n.p,{children:"Comme indiqu\xe9 dans l'exemple fourni sur le site du cours, les \xe9tapes habituelles pour cr\xe9er un mod\xe8le N-grammes sont :"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"la construction du vocabulaire"}),"\n",(0,r.jsx)(n.li,{children:"la construction des N-grammes"}),"\n",(0,r.jsx)(n.li,{children:"l'entra\xeenement du mod\xe8le N-gramme"}),"\n",(0,r.jsx)(n.li,{children:"l'utilisation du mod\xe8le pour estimer des probabilit\xe9s ou des perplexit\xe9s"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Nous devons importer d'autres librairies de NTLK pour cr\xe9er des mod\xe8les N-grammes :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ntlk.tokenize.word_tokenize"})," pour d\xe9couper les phrases en mots;"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ntlk.util.ngrams"})," pour extraire les N-grammes;"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ntlk.util.pad_sequence"})," qui renvoie une s\xe9quence compl\xe9t\xe9e d'\xe9l\xe9ments avant l'extraction des N-grammes;"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nltk.util.everygrams"})," pour g\xe9n\xe9rer une liste de tous les N-grammes possibles jusqu'\xe0 une certaine longueur maximale ",(0,r.jsxs)(n.span,{className:"katex",children:[(0,r.jsx)(n.span,{className:"katex-mathml",children:(0,r.jsx)(n.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,r.jsxs)(n.semantics,{children:[(0,r.jsx)(n.mrow,{children:(0,r.jsx)(n.mi,{children:"n"})}),(0,r.jsx)(n.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,r.jsx)(n.span,{className:"katex-html","aria-hidden":"true",children:(0,r.jsxs)(n.span,{className:"base",children:[(0,r.jsx)(n.span,{className:"strut",style:{height:"0.4306em"}}),(0,r.jsx)(n.span,{className:"mord mathnormal",children:"n"})]})})]}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ntlk.lm.Laplace"})," pour cr\xe9er des mod\xe8les N-grammes avec lissage de Laplace."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Ainsi, ces trois lignes de code sont ajout\xe9es pour importer les librairies requises."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from nltk.tokenize import word_tokenize\nfrom nltk.util import ngrams, pad_sequence\nfrom nltk.lm import Laplace\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import nltk\n# autres librairies \xe0 importer pour la partie sur les N-grammes?\nfrom nltk.tokenize import word_tokenize\nfrom nltk.util import ngrams, pad_sequence, everygrams\nfrom nltk.lm import Laplace\n\nBOS = '<BOS>'  # Jeton de d\xe9but de proverbe\nEOS = '<EOS>'  # Jeton de fin de proverbe\n\nmodels = {}  # les mod\xe8les entra\xeen\xe9s - [1: modele_unigramme, 2: modele_bigramme, 3: modele_trigramme]\n"})}),"\n",(0,r.jsxs)(n.p,{children:["La cellule ci-dessous contient une fonction pour construire le vocabulaire. Elle transforme les phrases en minuscule, d\xe9coupe les phrases en mots et ajoute tous les mots dans un ensemble ",(0,r.jsx)(n.code,{children:"set"}),", y compris les BOS (",(0,r.jsx)(n.em,{children:"Beginning Of Sentence"}),") et EOS (",(0,r.jsx)(n.em,{children:"End Of Sentence"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"J'obtiens 4471 mots diff\xe9rents dans le vocabulaire."}),"\n",(0,r.jsx)(n.p,{children:"Cette fonction provient du notebook du site du cours."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def build_vocabulary(text_list):\n    all_unigrams = list()\n    for sentence in text_list:\n        word_list = word_tokenize(sentence.lower())\n        all_unigrams = all_unigrams + word_list\n    voc = set(all_unigrams)\n    voc.add(BOS)\n    voc.add(EOS)\n    return list(voc)\n\nvocabulary = build_vocabulary(proverbs)\nprint(f"Nombre de mots diff\xe9rents dans le vocabulaire: {len(vocabulary)}.")\nprint("Vocabulaire (25 premiers mots):", vocabulary[:25])\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"Nombre de mots diff\xe9rents dans le vocabulaire: 4471.\nVocabulaire (25 premiers mots): ['instant', 'oignez', 'balaie', 'tout', 'habite', 'chenille', 'cornu', \n'promet', 'robe', 'paria', 'obscure', 'oi', 'sur', 'raser', 'sourd', 'veillant', 'picard', 'peuvent', \n'autorit\xe9', 'dommage', 'z\xe8le', 'chambri\xe8re', 'faim', 'loger', 'midi']\n"})}),"\n",(0,r.jsx)(n.p,{children:"Par la suite, on extrait les N-grammes du texte. La fonction suivante qui provient du site du cours aide \xe0 faire cela."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def get_ngrams(text_list, n=2):\n    all_ngrams = list()\n    for sentence in text_list:\n        tokens = word_tokenize(sentence.lower())\n        padded_sent = list(pad_sequence(tokens, pad_left=True, left_pad_symbol=BOS, pad_right=True, right_pad_symbol=EOS, n=n))\n        all_ngrams = all_ngrams + list(ngrams(padded_sent, n=n))\n    return all_ngrams\n\n# Par exemple, avec n=1...\norder = 1\ncorpus_ngrams = get_ngrams(proverbs, n=order)\nprint("Les 10 premiers unigrammes:")\nprint(corpus_ngrams[:10])\n\n# Par exemple, avec n=2...\norder = 2\ncorpus_ngrams = get_ngrams(proverbs, n=order)\nprint("Les 10 premiers bigrammes:")\nprint(corpus_ngrams[:10])\n\n# Par exemple, avec n=3...\norder = 3\ncorpus_ngrams = get_ngrams(proverbs, n=order)\nprint("Les 10 premiers trigrammes:")\nprint(corpus_ngrams[:10])\n'})}),"\n",(0,r.jsx)(n.p,{children:"Finalement, on cr\xe9e et on entra\xeene un mod\xe8le \xe0 partir du vocabulaire et des N-grammes de nos textes d'entra\xeenement. Dans cet exemple pr\xe9sent\xe9 \xe0 titre illustratif, on construit un mod\xe8le avec lissage de Laplace."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \xc0 titre illustratif... On construit et on entra\xeene un mod\xe8le N-grammes.\nmodel = Laplace(order)\nmodel.fit([corpus_ngrams], vocabulary_text=vocabulary)\nlen(model.vocab)\n# 4472\n"})}),"\n",(0,r.jsxs)(n.p,{children:["La fonction ",(0,r.jsx)(n.code,{children:"train_models(proverbs)"})," ci-dessous regroupe le tout pour cr\xe9er des mod\xe8les N-grammes d'ordre 1, 2 et 3 de la fa\xe7on suivante :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dans une boucle couvrant chacun des mod\xe8les N-grammes avec ",(0,r.jsx)(n.code,{children:"order = 1,2,3"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Extraire les N-grammes des proverbes."}),"\n",(0,r.jsx)(n.li,{children:"Cr\xe9er un mod\xe8le N-grammes avec lissage de Laplace."}),"\n",(0,r.jsx)(n.li,{children:"Entra\xeener le mod\xe8le N-grammes avec les donn\xe9es pr\xe9trait\xe9es et le vocabulaire pr\xe9c\xe9demment cr\xe9\xe9."}),"\n",(0,r.jsx)(n.li,{children:"Conserver le mod\xe8le N-grammes dans un dictionnaire."}),"\n",(0,r.jsx)(n.li,{children:"Retourner le dictionnaire contenant les trois mod\xe8les N-grammes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Ensuite, j'attribue le dictionnaire des mod\xe8les dans une variable globale nomm\xe9e ",(0,r.jsx)(n.code,{children:"models"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def train_models(proverbs):\n    """ Vous ajoutez \xe0 partir d\'ici le code dont vous avez besoin\n        pour construire les diff\xe9rents mod\xe8les N-grammes.\n        Cette fonction doit construire tous les mod\xe8les en une seule passe.\n        Voir les consignes de l\'\xe9nonc\xe9 du travail pratique concernant les mod\xe8les \xe0 entra\xeener.\n\n        Vous pouvez ajouter les fonctions/m\xe9thodes et variables que vous jugerez n\xe9cessaire.\n        Merci de ne pas modifier la signature et le comportement de cette fonction (nom, arguments, sauvegarde des mod\xe8les).\n    """\n\n    # Votre code \xe0 partir d\'ici...\n\n    # Cr\xe9er des mod\xe8les N-grammes (n=1,2,3) avec lissage de Laplace.\n    ngram_models = {}\n    for order in range(1, 4):  # Pour n allant de 1 \xe0 3 inclus.\n        # Extraire les N-grammes des proverbes.\n        corpus_ngrams = get_ngrams(proverbs, n=order)\n\n        # Cr\xe9er un mod\xe8le N-grammes avec lissage de Laplace.\n        ngram_models[order] = Laplace(order)\n\n        # Entra\xeener le mod\xe8le N-grammes avec les donn\xe9es pr\xe9trait\xe9es et le vocabulaire.\n        ngram_models[order].fit([corpus_ngrams], vocabulary_text=vocabulary)\n\n    return ngram_models\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Attribuer la liste des mod\xe8les dans une variable globale.\nmodels = train_models(proverbs)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"section-4---compl\xe9ter-un-proverbe",children:"Section 4 - Compl\xe9ter un proverbe"}),"\n",(0,r.jsx)(n.p,{children:"Voici une explication de ma d\xe9marche pour compl\xe9ter un proverbe."}),"\n",(0,r.jsxs)(n.p,{children:["La fonction ",(0,r.jsx)(n.code,{children:"fill_masked_proverb()"})," effectue successivement les op\xe9rations suivantes :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cr\xe9er des dictionnaires vides (",(0,r.jsx)(n.code,{children:"test_proverb"}),", ",(0,r.jsx)(n.code,{children:"test_logprob"})," et ",(0,r.jsx)(n.code,{children:"test_perplexity"}),") pour contenir respectivement le proverbe, le logprob et la perplexit\xe9 pour les proverbes reconstruits avec les combinaisons ",(0,r.jsx)(n.code,{children:"[word1, word2]"})," et ",(0,r.jsx)(n.code,{children:"[word2, word1]"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Dans une boucle ",(0,r.jsx)(n.code,{children:"k = 0,1"})," g\xe9rant les combinaisons ",(0,r.jsx)(n.code,{children:"[word1, word2]"})," et ",(0,r.jsx)(n.code,{children:"[word2, word1]"})," :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Construire le proverbe en rempla\xe7ant les ast\xe9rix par les mots dans l'ordre propos\xe9 avec la fonction ",(0,r.jsx)(n.code,{children:"replace_stars_with_words()"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"D\xe9couper le proverbe en mots et ajouter les jetons BOS et EOS."}),"\n",(0,r.jsxs)(n.li,{children:["Attribuer \xe0 ",(0,r.jsx)(n.code,{children:"model"})," le model N-grammes o\xf9 N est donn\xe9e par le param\xe8tre ",(0,r.jsx)(n.code,{children:"n"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Si ",(0,r.jsx)(n.code,{children:'criteria == "perplexity"'})," alors :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Extraire les n-grammes du proverbe."}),"\n",(0,r.jsx)(n.li,{children:"Calculer l'entropie et la perplexit\xe9."}),"\n",(0,r.jsx)(n.li,{children:"Le meilleur proverbe est celui ayant la perplexit\xe9 la moins \xe9lev\xe9e."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Si ",(0,r.jsx)(n.code,{children:'criteria == "logprob"'})," alors :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Initialiser une variable pour stocker le logarithme de la probabilit\xe9 (",(0,r.jsx)(n.em,{children:"logprob"}),") total du proverbe."]}),"\n",(0,r.jsxs)(n.li,{children:["Dans une boucle, parcourir le proverbe \xe0 partir de la position n (pour \xe9viter de sortir de la plage).","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Extraire le contexte (mots pr\xe9c\xe9dents) de longueur n-1 et le mot actuel."}),"\n",(0,r.jsxs)(n.li,{children:["Calculer le logarithme de la probabilit\xe9 (",(0,r.jsx)(n.em,{children:"logprob"}),") du mot actuel en fonction du contexte."]}),"\n",(0,r.jsxs)(n.li,{children:["Ajouter le ",(0,r.jsx)(n.em,{children:"logprob"})," du mot actuel au ",(0,r.jsx)(n.em,{children:"logprob"})," total."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def fill_masked_proverb(masked, word_list, n=3, criteria="perplexity"):\n    """ Fonction qui compl\xe8te un texte \xe0 trous (des mots masqu\xe9s) en ajoutant\n        les bons mots aux bons endroits (un "cloze test").\n\n        Le param\xe8tre criteria indique la mesure qu\'on utilise\n        pour choisir le mot le plus appropri\xe9: "logprob" ou "perplexity".\n        On retourne l\'estimation de cette mesure sur le proverbe complet,\n        c.-\xe0-d. en utilisant tous les mots du proverbe.\n\n        Le param\xe8tre n d\xe9signe le mod\xe8le utilis\xe9.\n        1 - unigramme NLTK, 2 - bigramme NLTK, 3 - trigramme NLTK\n\n        Cette fonction retourne la solution (le proverbe compl\xe9t\xe9) et\n        la valeur de logprob ou perplexit\xe9 (selon le param\xe8tre en entr\xe9e de la fonction).\n    """\n\n    # Votre code \xe0 partir d\'ici. Vous pouvez modifier comme bon vous semble.\n\n    test_proverb = {}\n    test_logprob = {}\n    test_perplexity = {}\n\n    for k in range(0,2):\n        # Construire le proverbe.\n        word1, word2 = word_list[k], word_list[k-1]\n        log(f"\\nword1 = {word1}, word2 = {word2}")\n        test_proverb[k] = replace_stars_with_words(masked, word1, word2)\n        log(f"test_proverb = {test_proverb[k]}")\n\n        # D\xe9couper le proverbe en mots et ajouter les jetons BOS et EOS.\n        test_tokens = nltk.word_tokenize(test_proverb[k])\n        test_tokens = [BOS] + test_tokens + [EOS]\n        log(f"test_tokens = {test_tokens}")\n\n        log(f"\\n{n}-gram model:")\n        model = models[n]\n\n        if criteria == "perplexity":\n            # Calculer la perplexit\xe9.\n            # Extraire les n-grammes du proverbe.\n            # Plus pr\xe9cis\xe9ment, g\xe9n\xe9rer une liste de tous les N-grammes possibles\n            # jusqu\'\xe0 une longueur maximale de n;\n            test_ngrams = list(everygrams(test_tokens, max_len=n))\n\n            # Calculer l\'entropie et la perplexit\xe9.\n            entropy_value = model.entropy(test_ngrams)\n            test_perplexity[k] = 2 ** entropy_value\n\n            # \xc9crire les valeurs calcul\xe9es.\n            log(f"Entropy: {entropy_value:.4f}")\n            log(f"Perplexity: {test_perplexity[k]:.4f}")\n        else:\n            # Calculer le logprob total pour la phrase enti\xe8re.\n            test_logprob[k] = 0.0  # Initialiser la variable pour stocker le logprob total.\n\n            # Parcourir la phrase \xe0 partir de la position n (pour \xe9viter de sortir de la plage).\n            for i in range(n, len(test_tokens)):\n                # Extraire le contexte (mots pr\xe9c\xe9dents) de longueur n-1 et le mot actuel.\n                context, word = tuple(test_tokens[i-n:i-1]), test_tokens[i]\n\n                # Calculer le logprob du mot actuel en fonction du contexte.\n                log_prob = model.logscore(word, context)\n\n                # Ajouter le logprob du mot actuel au logprob total.\n                test_logprob[k] += log_prob\n\n                # Afficher le logprob du mot actuel par rapport au contexte.\n                log(f"LogProb({word}|{context}) = {log_prob:.4f}")\n\n            # Afficher le logprob total pour la phrase.\n            log(f"Total LogProb for the sentence = {test_logprob[k]:.4f}")\n\n    if criteria == "perplexity":\n        # Choisir le proverbe la perplexit\xe9 la plus faible.\n        if test_perplexity[0] < test_perplexity[1]:\n            best_perplexity = test_perplexity[0]\n            result = test_proverb[0]\n        else:\n            best_perplexity = test_perplexity[1]\n            result = test_proverb[1]\n    else:\n        # Choisir le meilleur proverbe selon le logprob.\n        # Plus la s\xe9quence est probable selon le mod\xe8le, plus sa valeur de logprob est\n        # proche de z\xe9ro (en d\'autres termes, moins n\xe9gative).\n        if test_logprob[0] > test_logprob[1]:\n            best_logprob = test_logprob[0]\n            result = test_proverb[0]\n        else:\n            best_logprob = test_logprob[1]\n            result = test_proverb[1]\n\n    if criteria == "perplexity":\n        score = best_perplexity\n    else:\n        score = best_logprob\n\n    log(f"\\nresult = {result}")\n    log(f"score = {score} avec criteria = {criteria}")\n\n    return result, score\n'})}),"\n",(0,r.jsx)(n.p,{children:"Le code ci-dessous sert \xe0 visualiser le fonctionnement de la fonction pr\xe9c\xe9dente."}),"\n",(0,r.jsxs)(n.p,{children:["La m\xe9thode ",(0,r.jsx)(n.code,{children:"log(message)"})," est une fonction utilitaire pour \xe9crire des traces lorsque ",(0,r.jsx)(n.code,{children:"log_ok = True"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'log_ok = True\n\n# Fonction utilitaire pour \xe9crire des traces lors du d\xe9veloppement.\ndef log(message: str) -> None:\n    if log_ok:\n        print(message)\n\nmasked =  "* femme fait le ** homme"\nword_list = [\'bon\', \'bonne\']\n\nfor n in range(1,4):\n    result, score = fill_masked_proverb(masked, word_list, n=n, criteria="logprob")\n    result, score = fill_masked_proverb(masked, word_list, n=n, criteria="perplexity")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"section-5---exp\xe9rimentations-et-analyse-de-vos-r\xe9sultats",children:"Section 5 - Exp\xe9rimentations et analyse de vos r\xe9sultats"}),"\n",(0,r.jsx)(n.p,{children:"D\xe9crivez ici les r\xe9sultats obtenus et pr\xe9sentez l'\xe9valuation obtenue sur le fichier de test. Vous pouvez ajouter le nombre de cellules que vous souhaitez."}),"\n",(0,r.jsxs)(n.p,{children:["Pour \xe9valuer les r\xe9sultats sur le fichier test, j'ai cr\xe9\xe9 la fonction ",(0,r.jsx)(n.code,{children:"test_all()"})," qui effectue automatiquement les \xe9tapes suivantes :"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dans une boucle couvrant chacun des mod\xe8les N-grammes ",(0,r.jsx)(n.code,{children:"N = 1,2,3"})," :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Copie le dataframe test dans un nouvea dataframe ",(0,r.jsx)(n.code,{children:"test_df"})," sans la colonne ",(0,r.jsx)(n.code,{children:"Reconstructed_Proverb"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"D\xe9terminer le meilleur proverbe reconstruit selon le logprob."}),"\n",(0,r.jsx)(n.li,{children:"D\xe9terminer le meilleur proverbe reconstruit selon la perplexit\xe9."}),"\n",(0,r.jsxs)(n.li,{children:["Cr\xe9er un indicateur 1|0 si \xe9galit\xe9 ou non entre ",(0,r.jsx)(n.code,{children:"LogProb_Proverb"})," et ",(0,r.jsx)(n.code,{children:"Proverb"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Cr\xe9er un indicateur 1|0 si \xe9galit\xe9 ou non entre ",(0,r.jsx)(n.code,{children:"Perplexity_Proverb"})," et ",(0,r.jsx)(n.code,{children:"Proverb"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Afficher les r\xe9sultats d'ensemble."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Avec les r\xe9sultats obtenus (voir ci-dessous), je remarque que :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["la performance du mod\xe8le unigramme est mauvaise avec les deux mesures (",(0,r.jsx)(n.em,{children:"logprob"})," et perplexit\xe9);"]}),"\n",(0,r.jsxs)(n.li,{children:["la performance du mod\xe8le bigramme est encore mauvaise avec le ",(0,r.jsx)(n.em,{children:"logprob"})," (seulement 15 \xe9galit\xe9s sur 31 sur l'ensemble de test) mais tr\xe8s bonne avec la mesure de perplexit\xe9 (avec 30 \xe9galit\xe9s sur 31);"]}),"\n",(0,r.jsxs)(n.li,{children:["la performance du mod\xe8le trigramme est tr\xe8s mauvaise avec le ",(0,r.jsx)(n.em,{children:"logprob"})," (seulement 7 \xe9galit\xe9s sur 31) mais excellente avec la mesure de perplexit\xe9 (r\xe9sultat parfait avec 31 \xe9galit\xe9s sur 31);"]}),"\n",(0,r.jsxs)(n.li,{children:["avec la mesure de perplexit\xe9, la performance du mod\xe8le augmente avec l'ordre (c'est-\xe0-dire selon le N du N-grammes).","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"En d'autres mots, les proverbes g\xe9n\xe9r\xe9s \xe0 partir des mod\xe8les d'ordre sup\xe9rieurs semblent meilleurs;"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["toutefois, avec la mesure ",(0,r.jsx)(n.em,{children:"logprob"}),", la performance du mod\xe8le diminue entre l'ordre 2 et l'ordre 3;"]}),"\n",(0,r.jsxs)(n.li,{children:["la performance obtenue est toujours meilleure avec la mesure de perplexit\xe9 qu'avec le ",(0,r.jsx)(n.em,{children:"logprob"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Pr\xe9senter les r\xe9sultats d'ensemble.\ndef test_all() -> None:\n    for n in range(1, 4):  # Pour n allant de 1 \xe0 3 inclus.\n        # Copier le dataframe de test `df` dans un autre dataframe nomm\xe9 `test_df`.\n        test_df = df[['Masked', 'Word_list', 'Proverb']].copy()\n\n        # D\xe9terminer le meilleur proverbe reconstruit selon le logprob.\n        test_df['LogProb_Proverb'] = test_df.apply(\n            lambda row: fill_masked_proverb(row['Masked'], row['Word_list'], n=n, criteria=\"logprob\")[0], axis=1)\n\n        # D\xe9terminer le meilleur proverbe reconstruit selon la perplexit\xe9.\n        test_df['Perplexity_Proverb'] = test_df.apply(\n            lambda row: fill_masked_proverb(row['Masked'], row['Word_list'], n=n, criteria=\"perplexity\")[0], axis=1)\n\n        # Cr\xe9er un indicateur 1|0 si \xe9galit\xe9 ou non entre `LogProb_Proverb` et `Proverb`.\n        test_df['Match_LogProb'] = test_df.apply(\n            lambda row: 1 if row['LogProb_Proverb'] == row['Proverb'] else 0, axis=1)\n\n        # Cr\xe9er un indicateur 1|0 si \xe9galit\xe9 ou non entre `Perplexity_Proverb` et `Proverb`.\n        test_df['Match_Perplexity'] = test_df.apply(\n            lambda row: 1 if row['Perplexity_Proverb'] == row['Proverb'] else 0, axis=1)\n        test_df['Total'] = 1\n\n        # Afficher les r\xe9sultats d'ensemble.\n        print(f\"\\n{n}-gram model:\")\n        print(test_df[['Match_LogProb', 'Match_Perplexity', 'Total']].sum())\n\nlog_ok = False\ntest_all()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"t\xe2che-3---classification-automatique-de-descriptions-dincidents",children:"T\xe2che 3 - Classification automatique de descriptions d'incidents"}),"\n",(0,r.jsx)(n.p,{children:"Cette t\xe2che vise \xe0 classifier de courts textes d\xe9crivant des incidents qui se sont produits sur des chantiers de construction. Pour chaque incident, on retrouve une \xe9tiquette qui correspond au type d\u2019incident (0 \xe0 8)."}),"\n",(0,r.jsx)(n.p,{children:"Les objectifs de cette t\xe2che sont :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"de se familiariser avec la classification de texte"}),"\n",(0,r.jsx)(n.li,{children:"d'apprendre \xe0 utiliser les fonctions de base de scikit-learn"}),"\n",(0,r.jsxs)(n.li,{children:["de comprendre comment repr\xe9senter un texte sous la forme d'un sac de mots (",(0,r.jsx)(n.em,{children:"bag of words"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"de faire l'\xe9valuation d'un mod\xe8le de classification avec un corpus de test"}),"\n",(0,r.jsx)(n.li,{children:"de tenter d'interpr\xe9ter les r\xe9sultats d'un mod\xe8le \xe0 l'aide des poids d'attributs."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Pour la premi\xe8re partie, vous devez construire une fonction (",(0,r.jsx)(n.em,{children:"train_and_test_classifier"}),") qui entra\xeene un mod\xe8le (les options \xe9tant la r\xe9gression logistique et le na\xeff bay\xe9sien) et en faire l'\xe9valuation sur des donn\xe9es d'entra\xeenement et des donn\xe9es de test. Vous devez \xe9galement \xe9valuer l'impact de la lemmatisation de mots sur la performance des classificateurs. Deux fichiers de textes sont disponibles pour mener votre exp\xe9rimentation (voir Section 1)."]}),"\n",(0,r.jsx)(n.p,{children:"Pour la deuxi\xe8me partie, tentez de d\xe9terminer \xe0 quoi correspond chacune des classes d\u2019incident. Faites une analyse des poids des mod\xe8les pour proposer des \xe9tiquettes pour chacune des classes. Vous pouvez vous inspirer des notebooks disponibles sur le site du cours. Expliquez clairement comment vous \xeates arriv\xe9 \xe0 vos conclusions. L\u2019important ici est de d\xe9gager le th\xe8me principal \xe0 partir de vos observations et non pas de trouver la formulation exacte des \xe9tiquettes. Veuillez noter que certaines classes sont (tr\xe8s) difficiles \xe0 identifier."}),"\n",(0,r.jsxs)(n.p,{children:["Merci de respecter les signatures des fonctions ",(0,r.jsx)(n.em,{children:"train_and_test_classifier"})," et ",(0,r.jsx)(n.em,{children:"load_incident_dataset"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Note sur la lemmatisation: Cette normalisation de texte n\xe9cessite l'utilisation d'un mod\xe8le qui repose sur l'apprentissage automatique. En cons\xe9quence, son temps d'ex\xe9cution est plus long que le stemming. Si jamais cela ralentit trop vos exp\xe9rimentations, il est possible de ne faire le traitement qu'une seule fois en sauvegardant les r\xe9sultats apr\xe8s la premi\xe8re lemmatisation d'un fichier. Cela n'est toutefois pas exig\xe9 pour la remise de votre travail et ne sera pas \xe9valu\xe9."}),"\n",(0,r.jsx)(n.h3,{id:"section-1---lecture-des-fichiers-de-donn\xe9es",children:"Section 1 - Lecture des fichiers de donn\xe9es"}),"\n",(0,r.jsxs)(n.p,{children:["Voici les fichiers mis \xe0 votre disposition pour mener vos exp\xe9rimentations. La fonction ",(0,r.jsx)(n.em,{children:"load_incident_data"})," peut \xeatre utilis\xe9e pour lire les 2 fichiers (train et test). Rien \xe0 modifier dans cette section."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import json\n\ntrain_json_fn = "./data/t3_train.json"\ntest_json_fn = "./data/t3_test.json"\n\ndef load_incident_dataset(filename):\n    with open(filename, \'r\') as fp:\n        incident_list = json.load(fp)\n    return incident_list\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'train_list = load_incident_dataset(train_json_fn)\nprint("Nombre d\'incidents:", len(train_list))\nprint("\\nUn exemple:\\n", train_list[10])\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'test_list = load_incident_dataset(test_json_fn)\nprint("Nombre d\'incidents", len(test_list))\nincident = test_list[10]\nprint("\\nUne description d\'incident:", incident["text"])\nprint("\\nSon \xe9tiquette:", incident["label"])\n'})}),"\n",(0,r.jsx)(n.h3,{id:"section-2---entra\xeenement-et-\xe9valuation-des-mod\xe8les",children:"Section 2 - Entra\xeenement et \xe9valuation des mod\xe8les"}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez ajouter tout le code dont vous avez besoin pour l'entra\xeenement. Merci de ne pas modifier la signature de la fonction d'entra\xeenement et de bien expliquer votre d\xe9marche et vos r\xe9sultats. N'oubliez pas de faire une recommandation de mod\xe8le. Vous pouvez ajouter des cellules au notebook si n\xe9cessaire."}),"\n",(0,r.jsx)(n.p,{children:"Dans cette section, je dois :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["construire la fonction ",(0,r.jsx)(n.code,{children:"train_and_test_classifier"})," qui entra\xeene un mod\xe8le :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"avec une r\xe9gression logistique;"}),"\n",(0,r.jsx)(n.li,{children:"avec un na\xeff bay\xe9sien;"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"\xe9valuer les deux mod\xe8les sur des donn\xe9es d'entra\xeenement et des donn\xe9es de test;"}),"\n",(0,r.jsx)(n.li,{children:"\xe9valuer l'impact de la lemmatisation de mots sur la performance des classificateurs."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Pour ce faire, voici ma d\xe9marche :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"D'abord, je charge un mod\xe8le de langue avec Spacy pour la lemmatisation de mots."}),"\n",(0,r.jsxs)(n.li,{children:["J'ai cr\xe9\xe9 la fonction (",(0,r.jsx)(n.code,{children:"train_and_test_classifier"}),") qui r\xe9alise les op\xe9rations suivantes :","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cr\xe9ation des dataframes d'entra\xeenement (",(0,r.jsx)(n.code,{children:"X_train"})," et ",(0,r.jsx)(n.code,{children:"y_train"}),") et de tests (",(0,r.jsx)(n.code,{children:"X_test"}),"et ",(0,r.jsx)(n.code,{children:"y_test"}),") \xe0 partir des listes de donn\xe9es."]}),"\n",(0,r.jsxs)(n.li,{children:["S\xe9lection du classifieur bay\xe9sien naif si ",(0,r.jsx)(n.code,{children:"model=NB"})," ou r\xe9gression logistique sinon."]}),"\n",(0,r.jsxs)(n.li,{children:["S\xe9lection du tokenizer de mots de NLTK si ",(0,r.jsx)(n.code,{children:'normalization = "word"'})," ou ma fonction ",(0,r.jsx)(n.code,{children:"spacy_tokenizer"})," d\xe9clar\xe9e ci-haut sinon."]}),"\n",(0,r.jsxs)(n.li,{children:["Utilisation successive du vectorizeur ",(0,r.jsx)(n.code,{children:"CountVectorizer"})," pour cr\xe9er le sac de mots."]}),"\n",(0,r.jsxs)(n.li,{children:["Utilisation de ",(0,r.jsx)(n.code,{children:"GridSearchCV"})," pour trouver les meilleurs hyperparam\xe8tres avec une validation crois\xe9e 5 fois pour chaque combinaison d'hyperparam\xe8tres dans la grille de recherche."]}),"\n",(0,r.jsx)(n.li,{children:"Estimation des valeurs pr\xe9dites sur l'ensemble d'entra\xeenement et de test, et calcul des exactitudes."}),"\n",(0,r.jsx)(n.li,{children:"Calcul de la matrice de confusion."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Puis, j'ai cr\xe9\xe9 une cellule qui appelle la fonction ",(0,r.jsx)(n.code,{children:"train_and_test_classifier"}),"\npour chaque combinaison de mod\xe8le ('NB' ou 'LR') et de normalisation ('word' ou 'lemma'),\naffiche les exactitudes et les matrices de confusion, ainsi que les temps d'ex\xe9cution."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Vous trouverez les performances obtenues ci-dessous."}),"\n",(0,r.jsx)(n.p,{children:"D'abord, je charge un mod\xe8le de langue avec Spacy pour la lemmatisation de mots."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import spacy\n\n# Charger un mod\xe8le de langue.\n# Voir [en_core_web_sm](https://spacy.io/models/en#en_core_web_sm).\nnlp = spacy.load("en_core_web_sm")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Test.\n# Cette cellule sert seulement \xe0 illustrer diff\xe9rentes fa\xe7on d\'extraire les tokens ou lemmes.\ntext = "This tutorial is about Natural Language Processing in spaCy."\ndoc = nlp(text)\n\nprint(f"Option 1: {[token.text for token in doc]}")\nprint(f"Option 2: {[token.lemma_ for token in doc]}")\nprint(f"Option 3: {[token.lemma_ for token in doc if not token.is_stop]}")\nprint(f"Option 4: {[token.lemma_ for token in doc if not token.is_stop and token.is_alpha]}")\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"    Option 1: ['This', 'tutorial', 'is', 'about', 'Natural', 'Language', 'Processing', 'in', 'spaCy', '.']\n    Option 2: ['this', 'tutorial', 'be', 'about', 'Natural', 'Language', 'Processing', 'in', 'spaCy', '.']\n    Option 3: ['tutorial', 'Natural', 'Language', 'Processing', 'spaCy', '.']\n    Option 4: ['tutorial', 'Natural', 'Language', 'Processing', 'spaCy']\n"})}),"\n",(0,r.jsx)(n.p,{children:"D\xe9finir une fonction de tokenizer personnalis\xe9e avec lemmatisation."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# D\xe9finir une fonction de tokenizer personnalis\xe9e utilisant le vocabulaire t\xe9l\xe9charg\xe9 pr\xe9c\xe9demment.\ndef spacy_tokenizer(text):\n    doc = nlp(text)\n    tokens = [token.lemma_ for token in doc if not token.is_stop and token.is_alpha]\n    return tokens\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Test.\n# Cette cellule sert seulement \xe0 illustrer comment ma fonction d\xe9coupe une phrase en lemmes.\ntext = "This tutorial is about Natural Language Processing in spaCy."\ntokens = spacy_tokenizer(text)\nprint(tokens)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Test.\n# Pr\xe9senter un tableau de fr\xe9quence du label.\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict(train_list)\ncount = df['label'].value_counts()\nprint(count)\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Test.\n# Cette cellule d\xe9coupe les 5 premi\xe8res phrases.\nimport pandas as pd\n\ndf = pd.DataFrame.from_dict(train_list).head(5)\ndf['tokens'] = df['text'].apply(spacy_tokenizer)\nfor index, row in df.iterrows():\n    print(f\"Index: {index}\")\n    print(f\"Text (100 premiers caract\xe8res): {row['text'][:100]}\")\n    print(f\"Tokens (10 premiers): {row['tokens'][:10]}\")\n"})}),"\n",(0,r.jsxs)(n.p,{children:["D\xe9finir la fonction ",(0,r.jsx)(n.code,{children:"train_and_test_classifier"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# Importer ici les librairies dont vous avez besoin\nimport pandas as pd\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\n\ndef train_and_test_classifier(train_fn, test_fn, model='NB', normalization='words'):\n    \"\"\"\n    :param train_fn et test_fn: les 2 fichiers utilis\xe9es pour entra\xeener et tester les classificateurs.\n    :param model: le type de classificateur. NB = Naive Bayes, LR = R\xe9gression logistique.\n    :param normalization: la normalisation appliqu\xe9e aux mots des descriptions\n                 - 'word': les mots des textes sans normalization.\n                 - 'lemma': les lemmes des mots obtenus par lemmatisation avec Spacy.\n    :return: un dictionnaire contenant 3 valeurs:\n                 - l'accuracy \xe0 l'entra\xeenement (validation crois\xe9e)\n                 - l'accuracy sur le jeu de test\n                 - la matrice de confusion calcul\xe9e par scikit-learn sur les donn\xe9es de test\n    \"\"\"\n\n    # Votre code...\n\n    # Lire les fichiers et cr\xe9er des listes.\n    train_list = load_incident_dataset(train_json_fn)\n    test_list = load_incident_dataset(test_json_fn)\n\n    # Cr\xe9er les dataframes pandas.\n    train_df = pd.DataFrame.from_dict(train_list).astype({'label': 'int32'})\n    test_df = pd.DataFrame.from_dict(test_list).astype({'label': 'int32'})\n\n    # Cr\xe9er les dataframes d'entra\xeenement et de test.\n    X_train = train_df['text']    # Ensemble d'entra\xeenement.\n    y_train = train_df['label']   # \xc9tiquettes de l'ensemble d'entra\xeenement.\n    X_test = test_df['text']      # Ensemble de test.\n    y_test = test_df['label']     # \xc9tiquettes de l'ensemble de test.\n\n    # S\xe9lectionner le classifieur.\n    if model == 'NB':\n        # S\xe9lectionner le classifieur bay\xe9sien na\xeff multinomial et d\xe9finir la grille de param\xe8tres.\n        estimator = MultinomialNB()\n        param_grid = {\n            'alpha': [0.01, 0.1, 0.5, 1.0, 10.0],\n            'fit_prior': [True, False]\n        }\n    else:\n        # S\xe9lectionner la r\xe9gression logistique et d\xe9finir la grille de param\xe8tres.\n        estimator = LogisticRegression(max_iter=200)\n        param_grid = {\n            'penalty': ['l1', 'l2'],\n            'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n        }\n\n    # S\xe9lectionner la normalisation.\n    if normalization == 'word':\n        # Utiliser le tokenizeur de mots de NLTK.\n        tokenizer = word_tokenize\n    else:\n        # Utiliser notre tokenizer avec lemmatisation avec Spacy.\n        tokenizer = spacy_tokenizer\n\n    # Instancier le vectorizeur.\n    # Le vectorizeur permet de convertir les textes en sac de mots (vecteurs de compte).\n    vectorizer = CountVectorizer(\n        lowercase=True,\n        tokenizer=tokenizer,\n        token_pattern=None\n    )\n\n    # Apprendre le vocabulaire.\n    vectorizer.fit(X_train)\n\n    # Transformer les textes d'entra\xeenement et de test.\n    X_train_vectorized = vectorizer.transform(X_train)\n    X_test_vectorized = vectorizer.transform(X_test)\n\n    # Entrainer le mod\xe8le.\n    clf = GridSearchCV(estimator, param_grid, cv=5)\n    clf.fit(X_train_vectorized, y_train)\n\n    # Afficher les meilleurs param\xe8tres selon GridSearchCV.\n    print(f\"clf.best_params_={clf.best_params_}\")\n\n    # R\xe9cup\xe9rer l'exactitude moyenne de validation crois\xe9e du meilleur mod\xe8le \xe0 partir de GridSearchCV.\n    accuracy_train = clf.best_score_\n\n    # Calculer les valeurs pr\xe9dites sur l'ensemble de test et calculer l'exactitude.\n    y_pred = clf.predict(X_test_vectorized)\n    accuracy_test = metrics.accuracy_score(y_test, y_pred)\n\n    # Matrice de confusion obtenue sur l'ensemble de test.\n    cm = confusion_matrix(y_test, y_pred)\n\n    # Les r\xe9sultats \xe0 retourner\n    results = dict()\n    results['accuracy_train'] = accuracy_train\n    results['accuracy_test'] = accuracy_test\n    results['confusion_matrix'] = cm # la matrice de confusion obtenue de Scikit-learn\n\n    return results\n"})}),"\n",(0,r.jsx)(n.p,{children:"Cr\xe9er une version graphique de la matrice de confusion. Ce code vient d'un notebook provenant du site du cours."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n%config InlineBackend.figure_format ='retina'\n\n# Affichage graphique plus informatif avec Seaborne\ndef display_confusion_matrix(confusion_matrix, classes):\n    print(\"\\nVersion graphique de la matrice de confusion\")\n    df_cm = pd.DataFrame(confusion_matrix, index=classes, columns=classes)\n    f, ax = plt.subplots(figsize=(7, 5))\n    sns.heatmap(df_cm, annot=True, fmt=\"d\", linewidths=.5, ax=ax)\n    plt.ylabel('Vrai \xe9tiquette ')\n    plt.xlabel('\xc9tiquette pr\xe9dite')\n    plt.show()\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Le code ci-dessous appelle la fonction ",(0,r.jsx)(n.code,{children:"train_and_test_classifier"})," 4 fois, c'est-\xe0-dire pour chaque combinaison de ",(0,r.jsx)(n.code,{children:"model"}),"et de ",(0,r.jsx)(n.code,{children:"normalization"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import time\n\nfor model in ['NB', 'LR']:\n    for normalization in ['word', 'lemma']:\n        # Temps de d\xe9part.\n        start = time.time()\n\n        # Imprimer les param\xe8tres du mod\xe8le.\n        print(f\"\\nParam\xe8tres: model={model}, normalization={normalization}\")\n\n        # Entra\xeener le mod\xe8le en fonction du mod\xe8le et de la normalisation.\n        results = train_and_test_classifier(train_json_fn, test_json_fn, model=model, normalization=normalization)\n\n        # Afficher les exactitudes sur donn\xe9es entrainement et test, et matrice de confusion.\n        print(f\"Exactitude: accuracy_train={results['accuracy_train']:.3f}, accuracy_test={results['accuracy_test']:.3f}\")\n        cm = results['confusion_matrix']\n        print(\"Matrice de confusion\\n\", cm)\n\n        # Afficher la version graphique de la matrice de confusion.\n        classes = list(range(9))\n        display_confusion_matrix(cm, classes)\n\n        # Afficher le temps d'ex\xe9cution.\n        elapsed_time = time.time() - start\n        print(f\"Temps d'ex\xe9cution = {elapsed_time:.3f} sec.\")\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"png",src:s(60384).Z+"",width:"1161",height:"901"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"png",src:s(83605).Z+"",width:"1161",height:"901"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"png",src:s(48758).Z+"",width:"1161",height:"901"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"png",src:s(55944).Z+"",width:"1161",height:"901"})}),"\n",(0,r.jsx)(n.p,{children:"Avec mon MacBook Pro M1 16 Go, et les librairies \xe9num\xe9r\xe9es au d\xe9but du pr\xe9sent notebook avec leur version,\nj'obtiens les r\xe9sultats suivants :"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Mod\xe8le"}),(0,r.jsx)(n.th,{children:"Normalisation"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Exactitude sur ensemble d'entra\xeeenemnt"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Exactitude sur ensemble de test"}),(0,r.jsx)(n.th,{style:{textAlign:"right"},children:"Temps d'ex\xe9cution"}),(0,r.jsxs)(n.th,{children:[(0,r.jsx)(n.code,{children:"clf.best_params"})," du GridSearch"]})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NB"}),(0,r.jsx)(n.td,{children:"word"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.732"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.724"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"3.122"}),(0,r.jsx)(n.td,{children:"'alpha': 0.1, 'fit_prior': True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"NB"}),(0,r.jsx)(n.td,{children:"lemma"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.731"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.734"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"146.742"}),(0,r.jsx)(n.td,{children:"'alpha': 0.5, 'fit_prior': True"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LR"}),(0,r.jsx)(n.td,{children:"word"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.720"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.723"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"66.386"}),(0,r.jsx)(n.td,{children:"'C': 0.1, 'penalty': 'l2'"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LR"}),(0,r.jsx)(n.td,{children:"lemma"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.739"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"0.739"}),(0,r.jsx)(n.td,{style:{textAlign:"right"},children:"176.221"}),(0,r.jsx)(n.td,{children:"'C': 0.1, 'penalty': 'l2'"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Avec ces r\xe9sultats, je constate que :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"la r\xe9gression logistique (LR) n'est pas significativement plus performante que le bay\xe9sien naif (NB) sur l'ensemble de test;"}),"\n",(0,r.jsx)(n.li,{children:"la lemmatisation avec Spacy (lemma) am\xe9liore l\xe9g\xe8rement les r\xe9sultats par rapport au d\xe9coupage des mots sans normalisation (word);"}),"\n",(0,r.jsx)(n.li,{children:"la lemmatisation avec Spacy (lemma) prend beaucoup plus de temps que le d\xe9coupage en mots sans normalisation (word)."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"section-3---\xe0-quoi-correspondent-les-classes-explicabilit\xe9-du-mod\xe8le",children:"Section 3 - \xc0 quoi correspondent les classes? Explicabilit\xe9 du mod\xe8le"}),"\n",(0,r.jsx)(n.p,{children:"En utilisant les poids des mod\xe8les, tentez d'attribuer une signification aux diff\xe9rentes classes. Comme c'est une \xe9preuve d'analyse de donn\xe9es, il est possible que certaines classes ne soient pas interpr\xe9tables. Vous n'\xeates pas tenu \xe0 l'impossible. L'important est d'utiliser ce qu'on observe dans les mod\xe8les pour fournir une explication."}),"\n",(0,r.jsx)(n.p,{children:"Vous pouvez ajouter tout le code et toutes les cellules dont vous avez besoin."}),"\n",(0,r.jsx)(n.p,{children:"Pour r\xe9aliser cette section, j'effectue les \xe9tapes suivantes :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\xc9tape 1","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Lire le fichier ",(0,r.jsx)(n.code,{children:"train_json_fn"})," et cr\xe9er des dataframes pandas avec l'ensemble d'entra\xeenement."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\xc9tape 2","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cr\xe9er un sac de mots avec le vectorizer ",(0,r.jsx)(n.code,{children:"CountVectorizer"})," et la fonction ",(0,r.jsx)(n.code,{children:"spacy_tokenizer"})," pour faire la lemmatisation des mots avec Spacy."]}),"\n",(0,r.jsx)(n.li,{children:"Apprendre le vocabulaire."}),"\n",(0,r.jsx)(n.li,{children:"Transformer le texte de l'ensemble d'entra\xeenement."}),"\n",(0,r.jsx)(n.li,{children:"Obtenir les tokens du vectorizer."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\xc9tape 3","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Entra\xeener le mod\xe8le avec une r\xe9gression logistique et les meilleurs param\xe8tres trouv\xe9s pr\xe9c\xe9demment."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\xc9tape 4","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Parcourir chacun des labels et trouver les mots les plus importants pour chacun d'eux."}),"\n",(0,r.jsx)(n.li,{children:"R\xe9cup\xe9rer les coefficients de la r\xe9gression logistique pour cette classe."}),"\n",(0,r.jsx)(n.li,{children:"Trier les mots par poids d\xe9croissant et obtenir les indices des 50 premiers mots."}),"\n",(0,r.jsx)(n.li,{children:'Mapper les indices aux mots du vecteur "tokens"'}),"\n",(0,r.jsx)(n.li,{children:"Afficher les mots les plus importants pour chaque label."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"# \xc9tape 1\n# Lire le fichier `train_json_fn`.\ntrain_list = load_incident_dataset(train_json_fn)\n\n# Cr\xe9er des dataframes pandas.\ntrain_df = pd.DataFrame.from_dict(train_list).astype({'label': 'int32'})\nX_train = train_df['text']\ny_train = train_df['label']\n\n# \xc9tape 2\n# Utiliser notre tokenizer avec lemmatisation avec Spacy.\ntokenizer = spacy_tokenizer\n\n# Instancier le vectorizeur.\n# Le vectorizeur permet de convertir les textes en sac de mots (vecteurs de compte).\nvectorizer = CountVectorizer(\n    lowercase=True,\n    tokenizer=tokenizer,\n    token_pattern=None\n)\n\n# Apprendre le vocabulaire.\nvectorizer.fit(X_train)\n\n# Transformer les textes d'entra\xeenement et de test.\nX_train_vectorized = vectorizer.transform(X_train)\n\n# Obtenir les tokens du vectorizer.\ntokens = vectorizer.get_feature_names_out()\n\n# \xc9tape 3\n# Utiliser la classifieur de r\xe9gression logistique avec les meilleurs param\xe8tres trouv\xe9s pr\xe9c\xe9demment.\nclf = LogisticRegression(max_iter=200, C=0.01, penalty='l2')\n\n# Entrainer le mod\xe8le.\nclf.fit(X_train_vectorized, y_train)\n\n# \xc9tape 4\n# Parcourir chacun des labels et trouver les mots les plus importants pour chacun d'eux.\nunique_labels = sorted(y_train.unique())\nfor label in unique_labels:\n    # R\xe9cup\xe9rer les coefficients de la r\xe9gression logistique pour cette classe.\n    coefficients = clf.coef_[label]\n\n    # Triez les mots par poids d\xe9croissant et obtenir les indices des 50 premiers mots.\n    top_word_indices = coefficients.argsort()[::-1][:50]\n\n    # Mapper les indices aux mots du vecteur \"tokens\"\n    top_words = [tokens[i] for i in top_word_indices]\n\n    # Imprimer.\n    print(f\"\\nLabel={label}\")\n    print(f\"TopWords={top_words}\")\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},60384:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/output_22_1-bf37cc0b62ea9801c3943c01d04c3c7b.png"},55944:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/output_22_12-ffbaa40034a7c96eb06e50b8fa8cb74f.png"},83605:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/output_22_3-75cef49421b47512629f378f1af9ec55.png"},48758:(e,n,s)=>{s.d(n,{Z:()=>r});const r=s.p+"assets/images/output_22_8-8abc8c2186995dd1f8414e6a64b4d0d7.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var r=s(67294);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);