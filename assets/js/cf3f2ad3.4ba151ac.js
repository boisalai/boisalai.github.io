"use strict";(self.webpackChunkmy_doc=self.webpackChunkmy_doc||[]).push([[2152],{20278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var o=t(85893),i=t(11151);const s={sidebar_label:"ChatGPT Prompt Engineering for Developers",sidebar_position:2,tags:["ChatGPT","Prompting","DeepLearning.AI","OpenAI","Copyright d"]},r="ChatGPT Prompt Engineering for Developers",a={id:"courses/deeplearning-ai/sp02-chatgpt-prompt-engineering",title:"ChatGPT Prompt Engineering for Developers",description:"2023-08-20",source:"@site/docs/courses/deeplearning-ai/sp02-chatgpt-prompt-engineering.md",sourceDirName:"courses/deeplearning-ai",slug:"/courses/deeplearning-ai/sp02-chatgpt-prompt-engineering",permalink:"/docs/courses/deeplearning-ai/sp02-chatgpt-prompt-engineering",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/courses/deeplearning-ai/sp02-chatgpt-prompt-engineering.md",tags:[{label:"ChatGPT",permalink:"/docs/tags/chat-gpt"},{label:"Prompting",permalink:"/docs/tags/prompting"},{label:"DeepLearning.AI",permalink:"/docs/tags/deep-learning-ai"},{label:"OpenAI",permalink:"/docs/tags/open-ai"},{label:"Copyright d",permalink:"/docs/tags/copyright-d"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"ChatGPT Prompt Engineering for Developers",sidebar_position:2,tags:["ChatGPT","Prompting","DeepLearning.AI","OpenAI","Copyright d"]},sidebar:"tutorialSidebar",previous:{title:"Building Systems with the ChatGPT API",permalink:"/docs/courses/deeplearning-ai/sp01-chatgpt-building-systems"},next:{title:"LangChain for LLM Application Development",permalink:"/docs/courses/deeplearning-ai/sp03-langchain-1"}},l={},c=[{value:"Description",id:"description",level:2},{value:"Guidelines for Prompting",id:"guidelines-for-prompting",level:2},{value:"Principle 1: Write clear and specific instructions",id:"principle-1-write-clear-and-specific-instructions",level:3},{value:"Tactic 1: Use delimiters to clearly indicate distinct parts of the input",id:"tactic-1-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input",level:4},{value:"Tactic 2: Ask for a structured output like JSON, HTML",id:"tactic-2-ask-for-a-structured-output-like-json-html",level:4},{value:"Tactic 3: Ask the model to check whether conditions are satisfied",id:"tactic-3-ask-the-model-to-check-whether-conditions-are-satisfied",level:4},{value:"Tactic 4: &quot;Few-shot&quot; prompting",id:"tactic-4-few-shot-prompting",level:4},{value:"Principle 2: Give the model time to &quot;think&quot;",id:"principle-2-give-the-model-time-to-think",level:3},{value:"Tactic 1: Specify the steps required to complete a task",id:"tactic-1-specify-the-steps-required-to-complete-a-task",level:4},{value:"Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion",id:"tactic-2-instruct-the-model-to-work-out-its-own-solution-before-rushing-to-a-conclusion",level:4},{value:"Hallucination",id:"hallucination",level:3},{value:"Iterative Prompt Development",id:"iterative-prompt-development",level:2},{value:"Generate a marketing product description from a product fact sheet",id:"generate-a-marketing-product-description-from-a-product-fact-sheet",level:3},{value:"Issue 1: The text is too long",id:"issue-1-the-text-is-too-long",level:3},{value:"Issue 2. Text focuses on the wrong details",id:"issue-2-text-focuses-on-the-wrong-details",level:3},{value:"Issue 3. Description needs a table of dimensions",id:"issue-3-description-needs-a-table-of-dimensions",level:3},{value:"Load Python libraries to view HTML",id:"load-python-libraries-to-view-html",level:3},{value:"Summarizing",id:"summarizing",level:2},{value:"Summarize with a word/sentence/character limit",id:"summarize-with-a-wordsentencecharacter-limit",level:3},{value:"Summarize with a focus on shipping and delivery",id:"summarize-with-a-focus-on-shipping-and-delivery",level:3},{value:"Summarize with a focus on price and value",id:"summarize-with-a-focus-on-price-and-value",level:3},{value:"Try &quot;extract&quot; instead of &quot;summarize&quot;",id:"try-extract-instead-of-summarize",level:3},{value:"Summarize multiple product reviews",id:"summarize-multiple-product-reviews",level:3},{value:"Inferring",id:"inferring",level:2},{value:"Sentiment (positive/negative)",id:"sentiment-positivenegative",level:3},{value:"Identify types of emotions",id:"identify-types-of-emotions",level:3},{value:"Identify anger",id:"identify-anger",level:3},{value:"Extract product and company name from customer reviews",id:"extract-product-and-company-name-from-customer-reviews",level:3},{value:"Doing multiple tasks at once",id:"doing-multiple-tasks-at-once",level:3},{value:"Inferring topics",id:"inferring-topics",level:3},{value:"Infer 5 topics",id:"infer-5-topics",level:3},{value:"Make a news alert for certain topics",id:"make-a-news-alert-for-certain-topics",level:3},{value:"Transforming",id:"transforming",level:2},{value:"Translation",id:"translation",level:3},{value:"Universal Translator",id:"universal-translator",level:3},{value:"Tone Transformation",id:"tone-transformation",level:3},{value:"Format Conversion",id:"format-conversion",level:3},{value:"Spellcheck/Grammar check",id:"spellcheckgrammar-check",level:3},{value:"Expanding",id:"expanding",level:2},{value:"Customize the automated reply to a customer email",id:"customize-the-automated-reply-to-a-customer-email",level:3},{value:"Remind the model to use details from the customer&#39;s email",id:"remind-the-model-to-use-details-from-the-customers-email",level:3},{value:"Chat Workflow",id:"chat-workflow",level:2},{value:"OrderBot",id:"orderbot",level:3},{value:"Summary",id:"summary",level:2}];function p(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"chatgpt-prompt-engineering-for-developers",children:"ChatGPT Prompt Engineering for Developers"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"2023-08-20"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Short course",(0,o.jsx)("br",{}),"\nChatGPT Prompt Engineering for Developers",(0,o.jsx)("br",{}),"\nDeepLearning.AI and OpenAI",(0,o.jsx)("br",{}),"\nIsa Fulford, Andrew Ng"]}),"\n",(0,o.jsx)(n.p,{children:"Go beyond the chat box. Use API access to leverage LLMs into your own applications, and learn to build a custom chatbot."}),"\n",(0,o.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,o.jsx)(n.p,{children:"This course describes how LLMs work,\nprovides best practices for prompt engineering, and shows how LLM APIs can be used in applications for a variety of tasks, including:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Summarizing (e.g., summarizing user reviews for brevity)"}),"\n",(0,o.jsx)(n.li,{children:"Inferring (e.g., sentiment classification, topic extraction)"}),"\n",(0,o.jsx)(n.li,{children:"Transforming text (e.g., translation, spelling & grammar correction)"}),"\n",(0,o.jsx)(n.li,{children:"Expanding (e.g., automatically writing emails)"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"In addition, it explains key principles for writing effective prompts, how to systematically engineer good prompts,\nand also learn to build a custom chatbot. All concepts are illustrated with numerous examples, which you can play with directly\nin our Jupyter notebook environment to get hands-on experience with prompt engineering"}),"\n",(0,o.jsx)(n.h2,{id:"guidelines-for-prompting",children:"Guidelines for Prompting"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Base LLM"}),": Predict next word, based on text training data."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Instruction Tuned LLM"}),": Tries to follow instructions. Fine-tune on instructions and good attemps at following those instructions."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"To install the OpenAI Python library:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"!pip install openai\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The library needs to be configured with your account's secret key, which is available on the ",(0,o.jsx)(n.a,{href:"https://platform.openai.com/account/api-keys",children:"website"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import openai\nimport os\n\nopenai.api_key  = os.getenv(\"sk-xxx')\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Throughout this course, we will use OpenAI's `gpt-3.5-turbo`` model and the ",(0,o.jsx)(n.a,{href:"https://platform.openai.com/docs/guides/chat",children:"chat completions endpoint"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# See https://platform.openai.com/docs/guides/gpt/chat-completions-api\ndef get_completion(prompt, model="gpt-3.5-turbo"):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"principle-1-write-clear-and-specific-instructions",children:"Principle 1: Write clear and specific instructions"}),"\n",(0,o.jsx)(n.h4,{id:"tactic-1-use-delimiters-to-clearly-indicate-distinct-parts-of-the-input",children:"Tactic 1: Use delimiters to clearly indicate distinct parts of the input"}),"\n",(0,o.jsx)(n.p,{children:'Delimiters can be anything like: ```, """, ---, < >, &lt;tag&gt; </tag&gt;, :.'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text = f"""\nYou should express what you want a model to do by \\\nproviding instructions that are as clear and \\\nspecific as you can possibly make them. \\\nThis will guide the model towards the desired output, \\\nand reduce the chances of receiving irrelevant \\\nor incorrect responses. Don\'t confuse writing a \\\nclear prompt with writing a short prompt. \\\nIn many cases, longer prompts provide more clarity \\\nand context for the model, which can lead to \\\nmore detailed and relevant outputs.\n"""\nprompt = f"""\nSummarize the text delimited by triple backticks \\\ninto a single sentence.\n```{text}```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tactic-2-ask-for-a-structured-output-like-json-html",children:"Tactic 2: Ask for a structured output like JSON, HTML"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nGenerate a list of three made-up book titles along \\\nwith their authors and genres.\nProvide them in JSON format with the following keys:\nbook_id, title, author, genre.\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tactic-3-ask-the-model-to-check-whether-conditions-are-satisfied",children:"Tactic 3: Ask the model to check whether conditions are satisfied"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text_1 = f"""\nMaking a cup of tea is easy! First, you need to get some \\\nwater boiling. While that\'s happening, \\\ngrab a cup and put a tea bag in it. Once the water is \\\nhot enough, just pour it over the tea bag. \\\nLet it sit for a bit so the tea can steep. After a \\\nfew minutes, take out the tea bag. If you \\\nlike, you can add some sugar or milk to taste. \\\nAnd that\'s it! You\'ve got yourself a delicious \\\ncup of tea to enjoy.\n"""\nprompt = f"""\nYou will be provided with text delimited by triple quotes.\nIf it contains a sequence of instructions, \\\nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - \u2026\n\u2026\nStep N - \u2026\n\nIf the text does not contain a sequence of instructions, \\\nthen simply write \\"No steps provided.\\"\n\n\\"\\"\\"{text_1}\\"\\"\\"\n"""\nresponse = get_completion(prompt)\nprint("Completion for Text 1:")\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text_2 = f"""\nThe sun is shining brightly today, and the birds are \\\nsinging. It\'s a beautiful day to go for a \\\nwalk in the park. The flowers are blooming, and the \\\ntrees are swaying gently in the breeze. People \\\nare out and about, enjoying the lovely weather. \\\nSome are having picnics, while others are playing \\\ngames or simply relaxing on the grass. It\'s a \\\nperfect day to spend time outdoors and appreciate the \\\nbeauty of nature.\n"""\nprompt = f"""\nYou will be provided with text delimited by triple quotes.\nIf it contains a sequence of instructions, \\\nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - \u2026\n\u2026\nStep N - \u2026\n\nIf the text does not contain a sequence of instructions, \\\nthen simply write \\"No steps provided.\\"\n\n\\"\\"\\"{text_2}\\"\\"\\"\n"""\nresponse = get_completion(prompt)\nprint("Completion for Text 2:")\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tactic-4-few-shot-prompting",children:'Tactic 4: "Few-shot" prompting'}),"\n",(0,o.jsx)(n.p,{children:"Give successful examples of computinh tasks. Than ask model to perform the task."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to answer in a consistent style.\n\n<child>: Teach me about patience.\n\n<grandparent>: The river that carves the deepest \\\nvalley flows from a modest spring; the \\\ngrandest symphony originates from a single note; \\\nthe most intricate tapestry begins with a solitary thread.\n\n<child>: Teach me about resilience.\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"principle-2-give-the-model-time-to-think",children:'Principle 2: Give the model time to "think"'}),"\n",(0,o.jsx)(n.h4,{id:"tactic-1-specify-the-steps-required-to-complete-a-task",children:"Tactic 1: Specify the steps required to complete a task"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text = f"""\nIn a charming village, siblings Jack and Jill set out on \\\na quest to fetch water from a hilltop \\\nwell. As they climbed, singing joyfully, misfortune \\\nstruck\u2014Jack tripped on a stone and tumbled \\\ndown the hill, with Jill following suit. \\\nThough slightly battered, the pair returned home to \\\ncomforting embraces. Despite the mishap, \\\ntheir adventurous spirits remained undimmed, and they \\\ncontinued exploring with delight.\n"""\n# example 1\nprompt_1 = f"""\nPerform the following actions:\n1 - Summarize the following text delimited by triple \\\nbackticks with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the following \\\nkeys: french_summary, num_names.\n\nSeparate your answers with line breaks.\n\nText:\n```{text}```\n"""\nresponse = get_completion(prompt_1)\nprint("Completion for prompt 1:")\nprint(response)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Ask for output in a specified format."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt_2 = f"""\nYour task is to perform the following actions:\n1 - Summarize the following text delimited by\n  <> with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the\n  following keys: french_summary, num_names.\n\nUse the following format:\nText: <text to summarize>\nSummary: <summary>\nTranslation: <summary translation>\nNames: <list of names in Italian summary>\nOutput JSON: <json with summary and num_names>\n\nText: <{text}>\n"""\nresponse = get_completion(prompt_2)\nprint("\\nCompletion for prompt 2:")\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h4,{id:"tactic-2-instruct-the-model-to-work-out-its-own-solution-before-rushing-to-a-conclusion",children:"Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nDetermine if the student\'s solution is correct or not.\n\nQuestion:\nI\'m building a solar power installation and I need \\\n help working out the financials.\n- Land costs $100 / square foot\n- I can buy solar panels for $250 / square foot\n- I negotiated a contract for maintenance that will cost \\\nme a flat $100k per year, and an additional $10 / square \\\nfoot\nWhat is the total cost for the first year of operations\nas a function of the number of square feet.\n\nStudent\'s Solution:\nLet x be the size of the installation in square feet.\nCosts:\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 100x\nTotal cost: 100x + 250x + 100,000 + 100x = 450x + 100,000\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.p,{children:"Note that the student's solution is actually not correct."}),"\n",(0,o.jsx)(n.p,{children:"We can fix this by instructing the model to work out its own solution first."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"prompt = f\"\"\"\nYour task is to determine if the student's solution \\\nis correct or not.\nTo solve the problem do the following:\n- First, work out your own solution to the problem.\n- Then compare your solution to the student's solution \\\nand evaluate if the student's solution is correct or not.\nDon't decide if the student's solution is correct until\nyou have done the problem yourself.\n\nUse the following format:\nQuestion:\n---\nquestion here\n---\nStudent's solution:\n---\nstudent's solution here\n---\nActual solution:\n---\nsteps to work out the solution and your solution here\n---\nIs the student's solution the same as actual solution \\\njust calculated:\n---\nyes or no\n---\nStudent grade:\n---\ncorrect or incorrect\n---\n"})}),"\n",(0,o.jsx)(n.h3,{id:"hallucination",children:"Hallucination"}),"\n",(0,o.jsx)(n.p,{children:"Makes statements that sound plausible but are not true."}),"\n",(0,o.jsx)(n.p,{children:"Reducing hallucinations: First find relevant information, then answer the question based on the relevant information."}),"\n",(0,o.jsx)(n.h2,{id:"iterative-prompt-development",children:"Iterative Prompt Development"}),"\n",(0,o.jsx)(n.p,{children:"In this lesson, you'll iteratively analyze and refine your prompts to generate marketing copy from a product fact sheet."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"s01",src:t(63717).Z+"",width:"1190",height:"958"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport os\n\nopenai.api_key  = os.getenv(\'OPENAI_API_KEY\')\n\ndef get_completion(prompt, model="gpt-3.5-turbo"):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"generate-a-marketing-product-description-from-a-product-fact-sheet",children:"Generate a marketing product description from a product fact sheet"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'fact_sheet_chair = """\nOVERVIEW\n- Part of a beautiful family of mid-century inspired office furniture,\nincluding filing cabinets, desks, bookcases, meeting tables, and more.\n- Several options of shell color and base finishes.\n- Available with plastic back and front upholstery (SWC-100)\nor full upholstery (SWC-110) in 10 fabric and 6 leather options.\n- Base finish options are: stainless steel, matte black,\ngloss white, or chrome.\n- Chair is available with or without armrests.\n- Suitable for home or business settings.\n- Qualified for contract use.\n\nCONSTRUCTION\n- 5-wheel plastic coated aluminum base.\n- Pneumatic chair adjust for easy raise/lower action.\n\nDIMENSIONS\n- WIDTH 53 CM | 20.87\u201d\n- DEPTH 51 CM | 20.08\u201d\n- HEIGHT 80 CM | 31.50\u201d\n- SEAT HEIGHT 44 CM | 17.32\u201d\n- SEAT DEPTH 41 CM | 16.14\u201d\n\nOPTIONS\n- Soft or hard-floor caster options.\n- Two choices of seat foam densities:\n medium (1.8 lb/ft3) or high (2.8 lb/ft3)\n- Armless or 8 position PU armrests\n\nMATERIALS\nSHELL BASE GLIDER\n- Cast Aluminum with modified nylon PA6/PA66 coating.\n- Shell thickness: 10 mm.\nSEAT\n- HD36 foam\n\nCOUNTRY OF ORIGIN\n- Italy\n"""\n\nprompt = f"""\nYour task is to help a marketing team create a\ndescription for a retail website of a product based\non a technical fact sheet.\n\nWrite a product description based on the information\nprovided in the technical specifications delimited by\ntriple backticks.\n\nTechnical specifications: ```{fact_sheet_chair}```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"issue-1-the-text-is-too-long",children:"Issue 1: The text is too long"}),"\n",(0,o.jsx)(n.p,{children:"Limit the number of words/sentences/characters."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to help a marketing team create a\ndescription for a retail website of a product based\non a technical fact sheet.\n\nWrite a product description based on the information\nprovided in the technical specifications delimited by\ntriple backticks.\n\nUse at most 50 words.\n\nTechnical specifications: ```{fact_sheet_chair}```\n"""\nresponse = get_completion(prompt)\nprint(response)\nprint(len(response))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"issue-2-text-focuses-on-the-wrong-details",children:"Issue 2. Text focuses on the wrong details"}),"\n",(0,o.jsx)(n.p,{children:"Ask it to focus on the aspects that are relevant to the intended audience."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to help a marketing team create a\ndescription for a retail website of a product based\non a technical fact sheet.\n\nWrite a product description based on the information\nprovided in the technical specifications delimited by\ntriple backticks.\n\nThe description is intended for furniture retailers,\nso should be technical in nature and focus on the\nmaterials the product is constructed from.\n\nUse at most 50 words.\n\nTechnical specifications: ```{fact_sheet_chair}```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to help a marketing team create a\ndescription for a retail website of a product based\non a technical fact sheet.\n\nWrite a product description based on the information\nprovided in the technical specifications delimited by\ntriple backticks.\n\nThe description is intended for furniture retailers,\nso should be technical in nature and focus on the\nmaterials the product is constructed from.\n\nAt the end of the description, include every 7-character\nProduct ID in the technical specification.\n\nUse at most 50 words.\nUse at most 3 sentences.\nUse at most 280 characters\n\nTechnical specifications: ```{fact_sheet_chair}```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"issue-3-description-needs-a-table-of-dimensions",children:"Issue 3. Description needs a table of dimensions"}),"\n",(0,o.jsx)(n.p,{children:"Ask it to extract information and organize it in a table."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to help a marketing team create a\ndescription for a retail website of a product based\non a technical fact sheet.\n\nWrite a product description based on the information\nprovided in the technical specifications delimited by\ntriple backticks.\n\nThe description is intended for furniture retailers,\nso should be technical in nature and focus on the\nmaterials the product is constructed from.\n\nAt the end of the description, include every 7-character\nProduct ID in the technical specification.\n\nAfter the description, include a table that gives the\nproduct\'s dimensions. The table should have two columns.\nIn the first column include the name of the dimension.\nIn the second column include the measurements in inches only.\n\nGive the table the title \'Product Dimensions\'.\n\nFormat everything as HTML that can be used in a website.\nPlace the description in a <div> element.\n\nTechnical specifications: ```{fact_sheet_chair}```\n"""\n\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"load-python-libraries-to-view-html",children:"Load Python libraries to view HTML"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from IPython.display import display, HTML\n\ndisplay(HTML(response))\n"})}),"\n",(0,o.jsx)(n.h2,{id:"summarizing",children:"Summarizing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport os\n\nopenai.api_key  = os.getenv(\'OPENAI_API_KEY\')\n\ndef get_completion(prompt, model="gpt-3.5-turbo"): # Andrew mentioned that the prompt/ completion paradigm is preferable for this class\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"Text to summarize."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prod_review = """\nGot this panda plush toy for my daughter\'s birthday, \\\nwho loves it and takes it everywhere. It\'s soft and \\\nsuper cute, and its face has a friendly look. It\'s \\\na bit small for what I paid though. I think there \\\nmight be other options that are bigger for the \\\nsame price. It arrived a day earlier than expected, \\\nso I got to play with it myself before I gave it \\\nto her.\n"""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"summarize-with-a-wordsentencecharacter-limit",children:"Summarize with a word/sentence/character limit"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site.\n\nSummarize the review below, delimited by triple\nbackticks, in at most 30 words.\n\nReview: ```{prod_review}```\n"""\n\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"summarize-with-a-focus-on-shipping-and-delivery",children:"Summarize with a focus on shipping and delivery"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site to give feedback to the \\\nShipping deparmtment.\n\nSummarize the review below, delimited by triple\nbackticks, in at most 30 words, and focusing on any aspects \\\nthat mention shipping and delivery of the product.\n\nReview: ```{prod_review}```\n"""\n\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"summarize-with-a-focus-on-price-and-value",children:"Summarize with a focus on price and value"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to generate a short summary of a product \\\nreview from an ecommerce site to give feedback to the \\\npricing deparmtment, responsible for determining the \\\nprice of the product.\n\nSummarize the review below, delimited by triple\nbackticks, in at most 30 words, and focusing on any aspects \\\nthat are relevant to the price and perceived value.\n\nReview: ```{prod_review}```\n"""\n\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.admonition,{title:"Caution",type:"caution",children:(0,o.jsx)(n.p,{children:"Summaries include topics that are not related to the topic of focus."})}),"\n",(0,o.jsx)(n.h3,{id:"try-extract-instead-of-summarize",children:'Try "extract" instead of "summarize"'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYour task is to extract relevant information from \\\na product review from an ecommerce site to give \\\nfeedback to the Shipping department.\n\nFrom the review below, delimited by triple quotes \\\nextract the information relevant to shipping and \\\ndelivery. Limit to 30 words.\n\nReview: ```{prod_review}```\n"""\n\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"summarize-multiple-product-reviews",children:"Summarize multiple product reviews"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'review_1 = prod_review\n\n# review for a standing lamp\nreview_2 = """\nNeeded a nice lamp for my bedroom, and this one \\\nhad additional storage and not too high of a price \\\npoint. Got it fast - arrived in 2 days. The string \\\nto the lamp broke during the transit and the company \\\nhappily sent over a new one. Came within a few days \\\nas well. It was easy to put together. Then I had a \\\nmissing part, so I contacted their support and they \\\nvery quickly got me the missing piece! Seems to me \\\nto be a great company that cares about their customers \\\nand products.\n"""\n\n# review for an electric toothbrush\nreview_3 = """\nMy dental hygienist recommended an electric toothbrush, \\\nwhich is why I got this. The battery life seems to be \\\npretty impressive so far. After initial charging and \\\nleaving the charger plugged in for the first week to \\\ncondition the battery, I\'ve unplugged the charger and \\\nbeen using it for twice daily brushing for the last \\\n3 weeks all on the same charge. But the toothbrush head \\\nis too small. I\u2019ve seen baby toothbrushes bigger than \\\nthis one. I wish the head was bigger with different \\\nlength bristles to get between teeth better because \\\nthis one doesn\u2019t.  Overall if you can get this one \\\naround the $50 mark, it\'s a good deal. The manufactuer\'s \\\nreplacements heads are pretty expensive, but you can \\\nget generic ones that\'re more reasonably priced. This \\\ntoothbrush makes me feel like I\'ve been to the dentist \\\nevery day. My teeth feel sparkly clean!\n"""\n\n# review for a blender\nreview_4 = """\nSo, they still had the 17 piece system on seasonal \\\nsale for around $49 in the month of November, about \\\nhalf off, but for some reason (call it price gouging) \\\naround the second week of December the prices all went \\\nup to about anywhere from between $70-$89 for the same \\\nsystem. And the 11 piece system went up around $10 or \\\nso in price also from the earlier sale price of $29. \\\nSo it looks okay, but if you look at the base, the part \\\nwhere the blade locks into place doesn\u2019t look as good \\\nas in previous editions from a few years ago, but I \\\nplan to be very gentle with it (example, I crush \\\nvery hard items like beans, ice, rice, etc. in the \\\nblender first then pulverize them in the serving size \\\nI want in the blender then switch to the whipping \\\nblade for a finer flour, and use the cross cutting blade \\\nfirst when making smoothies, then use the flat blade \\\nif I need them finer/less pulpy). Special tip when making \\\nsmoothies, finely cut and freeze the fruits and \\\nvegetables (if using spinach-lightly stew soften the \\\nspinach then freeze until ready for use-and if making \\\nsorbet, use a small to medium sized food processor) \\\nthat you plan to use that way you can avoid adding so \\\nmuch ice if at all-when making your smoothie. \\\nAfter about a year, the motor was making a funny noise. \\\nI called customer service but the warranty expired \\\nalready, so I had to buy another one. FYI: The overall \\\nquality has gone done in these types of products, so \\\nthey are kind of counting on brand recognition and \\\nconsumer loyalty to maintain sales. Got it in about \\\ntwo days.\n"""\n\nreviews = [review_1, review_2, review_3, review_4]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'for i in range(len(reviews)):\n    prompt = f"""\n    Your task is to generate a short summary of a product \\\n    review from an ecommerce site.\n\n    Summarize the review below, delimited by triple \\\n    backticks in at most 20 words.\n\n    Review: ```{reviews[i]}```\n    """\n\n    response = get_completion(prompt)\n    print(i, response, "\\n")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"inferring",children:"Inferring"}),"\n",(0,o.jsx)(n.p,{children:"In this lesson, you will infer sentiment and topics from product reviews and news articles."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport os\n\nopenai.api_key  = os.getenv(\'OPENAI_API_KEY\')\n\ndef get_completion(prompt, model="gpt-3.5-turbo"):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.p,{children:"Product review text."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'lamp_review = """\nNeeded a nice lamp for my bedroom, and this one had \\\nadditional storage and not too high of a price point. \\\nGot it fast.  The string to our lamp broke during the \\\ntransit and the company happily sent over a new one. \\\nCame within a few days as well. It was easy to put \\\ntogether.  I had a missing part, so I contacted their \\\nsupport and they very quickly got me the missing piece! \\\nLumina seems to me to be a great company that cares \\\nabout their customers and products!!\n"""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"sentiment-positivenegative",children:"Sentiment (positive/negative)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"prompt = f\"\"\"\nWhat is the sentiment of the following product review,\nwhich is delimited with triple backticks?\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nWhat is the sentiment of the following product review,\nwhich is delimited with triple backticks?\n\nGive your answer as a single word, either "positive" \\\nor "negative".\n\nReview text: \'\'\'{lamp_review}\'\'\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"identify-types-of-emotions",children:"Identify types of emotions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"prompt = f\"\"\"\nIdentify a list of emotions that the writer of the \\\nfollowing review is expressing. Include no more than \\\nfive items in the list. Format your answer as a list of \\\nlower-case words separated by commas.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"identify-anger",children:"Identify anger"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"prompt = f\"\"\"\nIs the writer of the following review expressing anger?\\\nThe review is delimited with triple backticks. \\\nGive your answer as either yes or no.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"extract-product-and-company-name-from-customer-reviews",children:"Extract product and company name from customer reviews"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nIdentify the following items from the review text:\n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n"Item" and "Brand" as the keys.\nIf the information isn\'t present, use "unknown" \\\nas the value.\nMake your response as short as possible.\n\nReview text: \'\'\'{lamp_review}\'\'\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"doing-multiple-tasks-at-once",children:"Doing multiple tasks at once"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nIdentify the following items from the review text:\n- Sentiment (positive or negative)\n- Is the reviewer expressing anger? (true or false)\n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n"Sentiment", "Anger", "Item" and "Brand" as the keys.\nIf the information isn\'t present, use "unknown" \\\nas the value.\nMake your response as short as possible.\nFormat the Anger value as a boolean.\n\nReview text: \'\'\'{lamp_review}\'\'\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"inferring-topics",children:"Inferring topics"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'story = """\nIn a recent survey conducted by the government,\npublic sector employees were asked to rate their level\nof satisfaction with the department they work at.\nThe results revealed that NASA was the most popular\ndepartment with a satisfaction rating of 95%.\n\nOne NASA employee, John Smith, commented on the findings,\nstating, "I\'m not surprised that NASA came out on top.\nIt\'s a great place to work with amazing people and\nincredible opportunities. I\'m proud to be a part of\nsuch an innovative organization."\n\nThe results were also welcomed by NASA\'s management team,\nwith Director Tom Johnson stating, "We are thrilled to\nhear that our employees are satisfied with their work at NASA.\nWe have a talented and dedicated team who work tirelessly\nto achieve our goals, and it\'s fantastic to see that their\nhard work is paying off."\n\nThe survey also revealed that the\nSocial Security Administration had the lowest satisfaction\nrating, with only 45% of employees indicating they were\nsatisfied with their job. The government has pledged to\naddress the concerns raised by employees in the survey and\nwork towards improving job satisfaction across all departments.\n"""\n'})}),"\n",(0,o.jsx)(n.h3,{id:"infer-5-topics",children:"Infer 5 topics"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"prompt = f\"\"\"\nDetermine five topics that are being discussed in the \\\nfollowing text, which is delimited by triple backticks.\n\nMake each item one or two words long.\n\nFormat your response as a list of items separated by commas.\n\nText sample: '''{story}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n\nresponse.split(sep=',')\n\n\n"})}),"\n",(0,o.jsx)(n.h3,{id:"make-a-news-alert-for-certain-topics",children:"Make a news alert for certain topics"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'topic_list = [\n    "nasa", "local government", "engineering",\n    "employee satisfaction", "federal government"\n]\n\nprompt = f"""\nDetermine whether each item in the following list of \\\ntopics is a topic in the text below, which\nis delimited with triple backticks.\n\nGive your answer as list with 0 or 1 for each topic.\\\n\nList of topics: {", ".join(topic_list)}\n\nText sample: \'\'\'{story}\'\'\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n\ntopic_dict = {i.split(\': \')[0]: int(i.split(\': \')[1]) for i in response.split(sep=\'\\n\')}\nif topic_dict[\'nasa\'] == 1:\n    print("ALERT: New NASA story!")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"transforming",children:"Transforming"}),"\n",(0,o.jsx)(n.p,{children:"In this section, we will explore how to use Large Language Models for text transformation tasks such as language\ntranslation, spelling and grammar checking, tone adjustment, and format conversion."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport os\n\nopenai.api_key  = os.getenv(\'OPENAI_API_KEY\')\n\ndef get_completion(prompt, model="gpt-3.5-turbo", temperature=0):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n    )\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"translation",children:"Translation"}),"\n",(0,o.jsx)(n.p,{children:"ChatGPT is trained with sources in many languages. This gives the model the ability to do translation. Here are some examples of how to use this capability."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nTranslate the following English text to Spanish: \\\n```Hi, I would like to order a blender```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nTell me which language this is:\n```Combien co\xfbte le lampadaire?```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nTranslate the following  text to French and Spanish\nand English pirate: \\\n```I want to order a basketball```\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nTranslate the following text to Spanish in both the \\\nformal and informal forms:\n\'Would you like to order a pillow?\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"universal-translator",children:"Universal Translator"}),"\n",(0,o.jsx)(n.p,{children:"Imagine you are in charge of IT at a large multinational e-commerce company. Users are messaging you with IT issues in all their native\nlanguages. Your staff is from all over the world and speaks only their native languages. You need a universal translator!"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'user_messages = [\n  "La performance du syst\xe8me est plus lente que d\'habitude.",  # System performance is slower than normal\n  "Mi monitor tiene p\xedxeles que no se iluminan.",              # My monitor has pixels that are not lighting\n  "Il mio mouse non funziona",                                 # My mouse is not working\n  "M\xf3j klawisz Ctrl jest zepsuty",                             # My keyboard has a broken control key\n  "\u6211\u7684\u5c4f\u5e55\u5728\u95ea\u70c1"                                               # My screen is flashing\n]\n\nfor issue in user_messages:\n    prompt = f"Tell me what language this is: ```{issue}```"\n    lang = get_completion(prompt)\n    print(f"Original message ({lang}): {issue}")\n\n    prompt = f"""\n    Translate the following  text to English \\\n    and Korean: ```{issue}```\n    """\n    response = get_completion(prompt)\n    print(response, "\\n")\n'})}),"\n",(0,o.jsx)(n.h3,{id:"tone-transformation",children:"Tone Transformation"}),"\n",(0,o.jsx)(n.p,{children:"Writing can vary based on the intended audience. ChatGPT can produce different tones."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nTranslate the following from slang to a business letter:\n\'Dude, This is Joe, check out this spec on this standing lamp.\'\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"format-conversion",children:"Format Conversion"}),"\n",(0,o.jsx)(n.p,{children:"ChatGPT can translate between formats. The prompt should describe the input and output formats."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'data_json = { "resturant employees" :[\n    {"name":"Shyam", "email":"shyamjaiswal@gmail.com"},\n    {"name":"Bob", "email":"bob32@gmail.com"},\n    {"name":"Jai", "email":"jai87@gmail.com"}\n]}\n\nprompt = f"""\nTranslate the following python dictionary from JSON to an HTML \\\ntable with column headers and title: {data_json}\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from IPython.display import display, Markdown, Latex, HTML, JSON\ndisplay(HTML(response))\n"})}),"\n",(0,o.jsx)(n.h3,{id:"spellcheckgrammar-check",children:"Spellcheck/Grammar check"}),"\n",(0,o.jsx)(n.p,{children:"Here are some examples of common grammar and spelling problems and the LLM's response."}),"\n",(0,o.jsx)(n.p,{children:"To signal to the LLM that you want it to proofread your text, you instruct the model to 'proofread' or 'proofread and correct'."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text = [\n  "The girl with the black and white puppies have a ball.",  # The girl has a ball.\n  "Yolanda has her notebook.", # ok\n  "Its going to be a long day. Does the car need it\u2019s oil changed?",  # Homonyms\n  "Their goes my freedom. There going to bring they\u2019re suitcases.",  # Homonyms\n  "Your going to need you\u2019re notebook.",  # Homonyms\n  "That medicine effects my ability to sleep. Have you heard of the butterfly affect?", # Homonyms\n  "This phrase is to cherck chatGPT for speling abilitty"  # spelling\n]\nfor t in text:\n    prompt = f"""Proofread and correct the following text\n    and rewrite the corrected version. If you don\'t find\n    and errors, just say "No errors found". Don\'t use\n    any punctuation around the text:\n    ```{t}```"""\n    response = get_completion(prompt)\n    print(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'text = f"""\nGot this for my daughter for her birthday cuz she keeps taking \\\nmine from my room.  Yes, adults also like pandas too.  She takes \\\nit everywhere with her, and it\'s super soft and cute.  One of the \\\nears is a bit lower than the other, and I don\'t think that was \\\ndesigned to be asymmetrical. It\'s a bit small for what I paid for it \\\nthough. I think there might be other options that are bigger for \\\nthe same price.  It arrived a day earlier than expected, so I got \\\nto play with it myself before I gave it to my daughter.\n"""\nprompt = f"proofread and correct this review: ```{text}```"\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from redlines import Redlines\n\ndiff = Redlines(text,response)\ndisplay(Markdown(diff.output_markdown))\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nproofread and correct this review. Make it more compelling.\nEnsure it follows APA style guide and targets an advanced reader.\nOutput in markdown format.\nText: ```{text}```\n"""\nresponse = get_completion(prompt)\ndisplay(Markdown(response))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"expanding",children:"Expanding"}),"\n",(0,o.jsx)(n.p,{children:"In this lesson, you will generate customer service emails that are tailored to each customer's review."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import openai\nimport os\n\nopenai.api_key  = os.getenv(\'OPENAI_API_KEY\')\n\ndef get_completion(prompt, model="gpt-3.5-turbo",temperature=0): # Andrew mentioned that the prompt/ completion paradigm is preferable for this class\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"customize-the-automated-reply-to-a-customer-email",children:"Customize the automated reply to a customer email"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:' given the sentiment from the lesson on "inferring",\n# and the original customer message, customize the email\nsentiment = "negative"\n\n# review for a blender\nreview = f"""\nSo, they still had the 17 piece system on seasonal \\\nsale for around $49 in the month of November, about \\\nhalf off, but for some reason (call it price gouging) \\\naround the second week of December the prices all went \\\nup to about anywhere from between $70-$89 for the same \\\nsystem. And the 11 piece system went up around $10 or \\\nso in price also from the earlier sale price of $29. \\\nSo it looks okay, but if you look at the base, the part \\\nwhere the blade locks into place doesn\u2019t look as good \\\nas in previous editions from a few years ago, but I \\\nplan to be very gentle with it (example, I crush \\\nvery hard items like beans, ice, rice, etc. in the \\\nblender first then pulverize them in the serving size \\\nI want in the blender then switch to the whipping \\\nblade for a finer flour, and use the cross cutting blade \\\nfirst when making smoothies, then use the flat blade \\\nif I need them finer/less pulpy). Special tip when making \\\nsmoothies, finely cut and freeze the fruits and \\\nvegetables (if using spinach-lightly stew soften the \\\nspinach then freeze until ready for use-and if making \\\nsorbet, use a small to medium sized food processor) \\\nthat you plan to use that way you can avoid adding so \\\nmuch ice if at all-when making your smoothie. \\\nAfter about a year, the motor was making a funny noise. \\\nI called customer service but the warranty expired \\\nalready, so I had to buy another one. FYI: The overall \\\nquality has gone done in these types of products, so \\\nthey are kind of counting on brand recognition and \\\nconsumer loyalty to maintain sales. Got it in about \\\ntwo days.\n"""\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service.\nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n"""\nresponse = get_completion(prompt)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"remind-the-model-to-use-details-from-the-customers-email",children:"Remind the model to use details from the customer's email"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'prompt = f"""\nYou are a customer service AI assistant.\nYour task is to send an email reply to a valued customer.\nGiven the customer email delimited by ```, \\\nGenerate a reply to thank the customer for their review.\nIf the sentiment is positive or neutral, thank them for \\\ntheir review.\nIf the sentiment is negative, apologize and suggest that \\\nthey can reach out to customer service.\nMake sure to use specific details from the review.\nWrite in a concise and professional tone.\nSign the email as `AI customer agent`.\nCustomer review: ```{review}```\nReview sentiment: {sentiment}\n"""\nresponse = get_completion(prompt, temperature=0.7)\nprint(response)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"chat-workflow",children:"Chat Workflow"}),"\n",(0,o.jsx)(n.p,{children:"In this notebook, you will explore how you can utilize the chat format to have extended conversations\nwith chatbots personalized or specialized for specific tasks or behaviors."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import os\nimport openai\n\nopenai.api_key  = os.getenv('OPENAI_API_KEY')\n"})}),"\n",(0,o.jsx)(n.p,{children:"Roles:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"system"}),": Sets behavior of assistant"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"assistant"}),": Chat model"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"user"}),": You"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'def get_completion(prompt, model="gpt-3.5-turbo"):\n    messages = [{"role": "user", "content": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, # this is the degree of randomness of the model\'s output\n    )\n    return response.choices[0].message["content"]\n\ndef get_completion_from_messages(messages, model="gpt-3.5-turbo", temperature=0):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature, # this is the degree of randomness of the model\'s output\n    )\n    # print(str(response.choices[0].message))\n    return response.choices[0].message["content"]\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"messages =  [\n{'role':'system', 'content':'You are an assistant that speaks like Shakespeare.'},\n{'role':'user', 'content':'tell me a joke'},\n{'role':'assistant', 'content':'Why did the chicken cross the road'},\n{'role':'user', 'content':'I don\\'t know'}  ]\n\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"messages =  [\n{'role':'system', 'content':'You are friendly chatbot.'},\n{'role':'user', 'content':'Hi, my name is Isa'}  ]\n\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"messages =  [\n{'role':'system', 'content':'You are friendly chatbot.'},\n{'role':'user', 'content':'Yes,  can you remind me, What is my name?'}  ]\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"messages =  [\n{'role':'system', 'content':'You are friendly chatbot.'},\n{'role':'user', 'content':'Hi, my name is Isa'},\n{'role':'assistant', 'content': \"Hi Isa! It's nice to meet you. \\\nIs there anything I can help you with today?\"},\n{'role':'user', 'content':'Yes, you can remind me, What is my name?'}  ]\nresponse = get_completion_from_messages(messages, temperature=1)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"orderbot",children:"OrderBot"}),"\n",(0,o.jsx)(n.p,{children:"We can automate the collection of user prompts and assistant responses to build a OrderBot.\nThe OrderBot will take orders at a pizza restaurant.\xe0"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"def collect_messages(_):\n    prompt = inp.value_input\n    inp.value = ''\n    context.append({'role':'user', 'content':f\"{prompt}\"})\n    response = get_completion_from_messages(context)\n    context.append({'role':'assistant', 'content':f\"{response}\"})\n    panels.append(\n        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))\n    panels.append(\n        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, style={'background-color': '#F6F6F6'})))\n\n    return pn.Column(*panels)\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import panel as pn  # GUI\npn.extension()\n\npanels = [] # collect display\n\ncontext = [ {'role':'system', 'content':\"\"\"\nYou are OrderBot, an automated service to collect orders for a pizza restaurant. \\\nYou first greet the customer, then collects the order, \\\nand then asks if it's a pickup or delivery. \\\nYou wait to collect the entire order, then summarize it and check for a final \\\ntime if the customer wants to add anything else. \\\nIf it's a delivery, you ask for an address. \\\nFinally you collect the payment.\\\nMake sure to clarify all options, extras and sizes to uniquely \\\nidentify the item from the menu.\\\nYou respond in a short, very conversational friendly style. \\\nThe menu includes \\\npepperoni pizza  12.95, 10.00, 7.00 \\\ncheese pizza   10.95, 9.25, 6.50 \\\neggplant pizza   11.95, 9.75, 6.75 \\\nfries 4.50, 3.50 \\\ngreek salad 7.25 \\\nToppings: \\\nextra cheese 2.00, \\\nmushrooms 1.50 \\\nsausage 3.00 \\\ncanadian bacon 3.50 \\\nAI sauce 1.50 \\\npeppers 1.00 \\\nDrinks: \\\ncoke 3.00, 2.00, 1.00 \\\nsprite 3.00, 2.00, 1.00 \\\nbottled water 5.00 \\\n\"\"\"} ]  # accumulate messages\n\ninp = pn.widgets.TextInput(value=\"Hi\", placeholder='Enter text here\u2026')\nbutton_conversation = pn.widgets.Button(name=\"Chat!\")\n\ninteractive_conversation = pn.bind(collect_messages, button_conversation)\n\ndashboard = pn.Column(\n    inp,\n    pn.Row(button_conversation),\n    pn.panel(interactive_conversation, loading_indicator=True, height=300),\n)\n\ndashboard\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"messages =  context.copy()\nmessages.append(\n{'role':'system', 'content':'create a json summary of the previous food order. Itemize the price for each item\\\n The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price '},\n)\n #The fields should be 1) pizza, price 2) list of toppings 3) list of drinks, include size include price  4) list of sides include size include price, 5)total price '},\n\nresponse = get_completion_from_messages(messages, temperature=0)\nprint(response)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Principles","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Write clear and specific instructions"}),"\n",(0,o.jsx)(n.li,{children:'Give the model time to "think"'}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.li,{children:"Iterative prompt development"}),"\n",(0,o.jsx)(n.li,{children:"Capabilities: Summarizing, Inferring, Transforming, Expanding"}),"\n",(0,o.jsx)(n.li,{children:"Building a chatbot"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},63717:(e,n,t)=>{t.d(n,{Z:()=>o});const o=t.p+"assets/images/s01-c7fe2b34e2d790586352def1b26a2658.png"},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(67294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);